
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model CoordinatorAssessment
 * 
 */
export type CoordinatorAssessment = $Result.DefaultSelection<Prisma.$CoordinatorAssessmentPayload>
/**
 * Model SuperviserAssessment
 * 
 */
export type SuperviserAssessment = $Result.DefaultSelection<Prisma.$SuperviserAssessmentPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Superviser
 * 
 */
export type Superviser = $Result.DefaultSelection<Prisma.$SuperviserPayload>
/**
 * Model Coordinator
 * 
 */
export type Coordinator = $Result.DefaultSelection<Prisma.$CoordinatorPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Resume
 * 
 */
export type Resume = $Result.DefaultSelection<Prisma.$ResumePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Scores: {
  POOR: 'POOR',
  FAIR: 'FAIR',
  GOOD: 'GOOD',
  EXCELLENT: 'EXCELLENT'
};

export type Scores = (typeof Scores)[keyof typeof Scores]


export const Role: {
  user: 'user',
  admin: 'admin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const DepartmentNames: {
  DEPARTMENT1: 'DEPARTMENT1',
  DEPARTMENT2: 'DEPARTMENT2',
  DEPARTMENT3: 'DEPARTMENT3'
};

export type DepartmentNames = (typeof DepartmentNames)[keyof typeof DepartmentNames]


export const WorkingFields: {
  TECHNOLOGY: 'TECHNOLOGY',
  BUSINESS: 'BUSINESS',
  FIELD1: 'FIELD1',
  FIELD2: 'FIELD2',
  FIELD3: 'FIELD3'
};

export type WorkingFields = (typeof WorkingFields)[keyof typeof WorkingFields]

}

export type Scores = $Enums.Scores

export const Scores: typeof $Enums.Scores

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type DepartmentNames = $Enums.DepartmentNames

export const DepartmentNames: typeof $Enums.DepartmentNames

export type WorkingFields = $Enums.WorkingFields

export const WorkingFields: typeof $Enums.WorkingFields

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more CoordinatorAssessments
 * const coordinatorAssessments = await prisma.coordinatorAssessment.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more CoordinatorAssessments
   * const coordinatorAssessments = await prisma.coordinatorAssessment.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.coordinatorAssessment`: Exposes CRUD operations for the **CoordinatorAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoordinatorAssessments
    * const coordinatorAssessments = await prisma.coordinatorAssessment.findMany()
    * ```
    */
  get coordinatorAssessment(): Prisma.CoordinatorAssessmentDelegate<ExtArgs>;

  /**
   * `prisma.superviserAssessment`: Exposes CRUD operations for the **SuperviserAssessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuperviserAssessments
    * const superviserAssessments = await prisma.superviserAssessment.findMany()
    * ```
    */
  get superviserAssessment(): Prisma.SuperviserAssessmentDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.superviser`: Exposes CRUD operations for the **Superviser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supervisers
    * const supervisers = await prisma.superviser.findMany()
    * ```
    */
  get superviser(): Prisma.SuperviserDelegate<ExtArgs>;

  /**
   * `prisma.coordinator`: Exposes CRUD operations for the **Coordinator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coordinators
    * const coordinators = await prisma.coordinator.findMany()
    * ```
    */
  get coordinator(): Prisma.CoordinatorDelegate<ExtArgs>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs>;

  /**
   * `prisma.resume`: Exposes CRUD operations for the **Resume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Resumes
    * const resumes = await prisma.resume.findMany()
    * ```
    */
  get resume(): Prisma.ResumeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    CoordinatorAssessment: 'CoordinatorAssessment',
    SuperviserAssessment: 'SuperviserAssessment',
    User: 'User',
    Student: 'Student',
    Department: 'Department',
    Superviser: 'Superviser',
    Coordinator: 'Coordinator',
    Application: 'Application',
    Company: 'Company',
    Verification: 'Verification',
    Image: 'Image',
    Resume: 'Resume'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'coordinatorAssessment' | 'superviserAssessment' | 'user' | 'student' | 'department' | 'superviser' | 'coordinator' | 'application' | 'company' | 'verification' | 'image' | 'resume'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      CoordinatorAssessment: {
        payload: Prisma.$CoordinatorAssessmentPayload<ExtArgs>
        fields: Prisma.CoordinatorAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoordinatorAssessmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoordinatorAssessmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          findFirst: {
            args: Prisma.CoordinatorAssessmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoordinatorAssessmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          findMany: {
            args: Prisma.CoordinatorAssessmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>[]
          }
          create: {
            args: Prisma.CoordinatorAssessmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          createMany: {
            args: Prisma.CoordinatorAssessmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CoordinatorAssessmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          update: {
            args: Prisma.CoordinatorAssessmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.CoordinatorAssessmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoordinatorAssessmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoordinatorAssessmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorAssessmentPayload>
          }
          aggregate: {
            args: Prisma.CoordinatorAssessmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoordinatorAssessment>
          }
          groupBy: {
            args: Prisma.CoordinatorAssessmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoordinatorAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoordinatorAssessmentCountArgs<ExtArgs>,
            result: $Utils.Optional<CoordinatorAssessmentCountAggregateOutputType> | number
          }
        }
      }
      SuperviserAssessment: {
        payload: Prisma.$SuperviserAssessmentPayload<ExtArgs>
        fields: Prisma.SuperviserAssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuperviserAssessmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuperviserAssessmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          findFirst: {
            args: Prisma.SuperviserAssessmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuperviserAssessmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          findMany: {
            args: Prisma.SuperviserAssessmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>[]
          }
          create: {
            args: Prisma.SuperviserAssessmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          createMany: {
            args: Prisma.SuperviserAssessmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SuperviserAssessmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          update: {
            args: Prisma.SuperviserAssessmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          deleteMany: {
            args: Prisma.SuperviserAssessmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SuperviserAssessmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SuperviserAssessmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserAssessmentPayload>
          }
          aggregate: {
            args: Prisma.SuperviserAssessmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuperviserAssessment>
          }
          groupBy: {
            args: Prisma.SuperviserAssessmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuperviserAssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuperviserAssessmentCountArgs<ExtArgs>,
            result: $Utils.Optional<SuperviserAssessmentCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Superviser: {
        payload: Prisma.$SuperviserPayload<ExtArgs>
        fields: Prisma.SuperviserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SuperviserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SuperviserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          findFirst: {
            args: Prisma.SuperviserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SuperviserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          findMany: {
            args: Prisma.SuperviserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>[]
          }
          create: {
            args: Prisma.SuperviserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          createMany: {
            args: Prisma.SuperviserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SuperviserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          update: {
            args: Prisma.SuperviserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          deleteMany: {
            args: Prisma.SuperviserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SuperviserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SuperviserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SuperviserPayload>
          }
          aggregate: {
            args: Prisma.SuperviserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuperviser>
          }
          groupBy: {
            args: Prisma.SuperviserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuperviserGroupByOutputType>[]
          }
          count: {
            args: Prisma.SuperviserCountArgs<ExtArgs>,
            result: $Utils.Optional<SuperviserCountAggregateOutputType> | number
          }
        }
      }
      Coordinator: {
        payload: Prisma.$CoordinatorPayload<ExtArgs>
        fields: Prisma.CoordinatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoordinatorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoordinatorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          findFirst: {
            args: Prisma.CoordinatorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoordinatorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          findMany: {
            args: Prisma.CoordinatorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>[]
          }
          create: {
            args: Prisma.CoordinatorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          createMany: {
            args: Prisma.CoordinatorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CoordinatorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          update: {
            args: Prisma.CoordinatorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          deleteMany: {
            args: Prisma.CoordinatorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoordinatorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoordinatorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoordinatorPayload>
          }
          aggregate: {
            args: Prisma.CoordinatorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoordinator>
          }
          groupBy: {
            args: Prisma.CoordinatorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoordinatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoordinatorCountArgs<ExtArgs>,
            result: $Utils.Optional<CoordinatorCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>,
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>,
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>,
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Resume: {
        payload: Prisma.$ResumePayload<ExtArgs>
        fields: Prisma.ResumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResumeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResumeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findFirst: {
            args: Prisma.ResumeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResumeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          findMany: {
            args: Prisma.ResumeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>[]
          }
          create: {
            args: Prisma.ResumeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          createMany: {
            args: Prisma.ResumeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ResumeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          update: {
            args: Prisma.ResumeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          deleteMany: {
            args: Prisma.ResumeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ResumeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ResumeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ResumePayload>
          }
          aggregate: {
            args: Prisma.ResumeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateResume>
          }
          groupBy: {
            args: Prisma.ResumeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ResumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResumeCountArgs<ExtArgs>,
            result: $Utils.Optional<ResumeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    applications: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | StudentCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }



  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    students: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | DepartmentCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }



  /**
   * Count Type CoordinatorCountOutputType
   */

  export type CoordinatorCountOutputType = {
    supervisers: number
  }

  export type CoordinatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    supervisers?: boolean | CoordinatorCountOutputTypeCountSupervisersArgs
  }

  // Custom InputTypes

  /**
   * CoordinatorCountOutputType without action
   */
  export type CoordinatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorCountOutputType
     */
    select?: CoordinatorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CoordinatorCountOutputType without action
   */
  export type CoordinatorCountOutputTypeCountSupervisersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperviserWhereInput
  }



  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    superviser: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    superviser?: boolean | CompanyCountOutputTypeCountSuperviserArgs
  }

  // Custom InputTypes

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSuperviserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperviserWhereInput
  }



  /**
   * Models
   */

  /**
   * Model CoordinatorAssessment
   */

  export type AggregateCoordinatorAssessment = {
    _count: CoordinatorAssessmentCountAggregateOutputType | null
    _avg: CoordinatorAssessmentAvgAggregateOutputType | null
    _sum: CoordinatorAssessmentSumAggregateOutputType | null
    _min: CoordinatorAssessmentMinAggregateOutputType | null
    _max: CoordinatorAssessmentMaxAggregateOutputType | null
  }

  export type CoordinatorAssessmentAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    coordinatorId: number | null
  }

  export type CoordinatorAssessmentSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    coordinatorId: number | null
  }

  export type CoordinatorAssessmentMinAggregateOutputType = {
    id: number | null
    qualityOfStudentInternshipReport: $Enums.Scores | null
    experienceGained: $Enums.Scores | null
    presentation: $Enums.Scores | null
    visualPresentationAid: $Enums.Scores | null
    overalAssessmentResult: $Enums.Scores | null
    studentId: number | null
    coordinatorId: number | null
  }

  export type CoordinatorAssessmentMaxAggregateOutputType = {
    id: number | null
    qualityOfStudentInternshipReport: $Enums.Scores | null
    experienceGained: $Enums.Scores | null
    presentation: $Enums.Scores | null
    visualPresentationAid: $Enums.Scores | null
    overalAssessmentResult: $Enums.Scores | null
    studentId: number | null
    coordinatorId: number | null
  }

  export type CoordinatorAssessmentCountAggregateOutputType = {
    id: number
    qualityOfStudentInternshipReport: number
    experienceGained: number
    presentation: number
    visualPresentationAid: number
    overalAssessmentResult: number
    studentId: number
    coordinatorId: number
    _all: number
  }


  export type CoordinatorAssessmentAvgAggregateInputType = {
    id?: true
    studentId?: true
    coordinatorId?: true
  }

  export type CoordinatorAssessmentSumAggregateInputType = {
    id?: true
    studentId?: true
    coordinatorId?: true
  }

  export type CoordinatorAssessmentMinAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    coordinatorId?: true
  }

  export type CoordinatorAssessmentMaxAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    coordinatorId?: true
  }

  export type CoordinatorAssessmentCountAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    coordinatorId?: true
    _all?: true
  }

  export type CoordinatorAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoordinatorAssessment to aggregate.
     */
    where?: CoordinatorAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoordinatorAssessments to fetch.
     */
    orderBy?: CoordinatorAssessmentOrderByWithRelationInput | CoordinatorAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoordinatorAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoordinatorAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoordinatorAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoordinatorAssessments
    **/
    _count?: true | CoordinatorAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoordinatorAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoordinatorAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoordinatorAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoordinatorAssessmentMaxAggregateInputType
  }

  export type GetCoordinatorAssessmentAggregateType<T extends CoordinatorAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCoordinatorAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoordinatorAssessment[P]>
      : GetScalarType<T[P], AggregateCoordinatorAssessment[P]>
  }




  export type CoordinatorAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoordinatorAssessmentWhereInput
    orderBy?: CoordinatorAssessmentOrderByWithAggregationInput | CoordinatorAssessmentOrderByWithAggregationInput[]
    by: CoordinatorAssessmentScalarFieldEnum[] | CoordinatorAssessmentScalarFieldEnum
    having?: CoordinatorAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoordinatorAssessmentCountAggregateInputType | true
    _avg?: CoordinatorAssessmentAvgAggregateInputType
    _sum?: CoordinatorAssessmentSumAggregateInputType
    _min?: CoordinatorAssessmentMinAggregateInputType
    _max?: CoordinatorAssessmentMaxAggregateInputType
  }

  export type CoordinatorAssessmentGroupByOutputType = {
    id: number
    qualityOfStudentInternshipReport: $Enums.Scores
    experienceGained: $Enums.Scores
    presentation: $Enums.Scores
    visualPresentationAid: $Enums.Scores
    overalAssessmentResult: $Enums.Scores
    studentId: number
    coordinatorId: number
    _count: CoordinatorAssessmentCountAggregateOutputType | null
    _avg: CoordinatorAssessmentAvgAggregateOutputType | null
    _sum: CoordinatorAssessmentSumAggregateOutputType | null
    _min: CoordinatorAssessmentMinAggregateOutputType | null
    _max: CoordinatorAssessmentMaxAggregateOutputType | null
  }

  type GetCoordinatorAssessmentGroupByPayload<T extends CoordinatorAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoordinatorAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoordinatorAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoordinatorAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], CoordinatorAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type CoordinatorAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qualityOfStudentInternshipReport?: boolean
    experienceGained?: boolean
    presentation?: boolean
    visualPresentationAid?: boolean
    overalAssessmentResult?: boolean
    studentId?: boolean
    coordinatorId?: boolean
    student?: boolean | CoordinatorAssessment$studentArgs<ExtArgs>
    coordinator?: boolean | CoordinatorAssessment$coordinatorArgs<ExtArgs>
  }, ExtArgs["result"]["coordinatorAssessment"]>

  export type CoordinatorAssessmentSelectScalar = {
    id?: boolean
    qualityOfStudentInternshipReport?: boolean
    experienceGained?: boolean
    presentation?: boolean
    visualPresentationAid?: boolean
    overalAssessmentResult?: boolean
    studentId?: boolean
    coordinatorId?: boolean
  }

  export type CoordinatorAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | CoordinatorAssessment$studentArgs<ExtArgs>
    coordinator?: boolean | CoordinatorAssessment$coordinatorArgs<ExtArgs>
  }


  export type $CoordinatorAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoordinatorAssessment"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs> | null
      coordinator: Prisma.$CoordinatorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      qualityOfStudentInternshipReport: $Enums.Scores
      experienceGained: $Enums.Scores
      presentation: $Enums.Scores
      visualPresentationAid: $Enums.Scores
      overalAssessmentResult: $Enums.Scores
      studentId: number
      coordinatorId: number
    }, ExtArgs["result"]["coordinatorAssessment"]>
    composites: {}
  }


  type CoordinatorAssessmentGetPayload<S extends boolean | null | undefined | CoordinatorAssessmentDefaultArgs> = $Result.GetResult<Prisma.$CoordinatorAssessmentPayload, S>

  type CoordinatorAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoordinatorAssessmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CoordinatorAssessmentCountAggregateInputType | true
    }

  export interface CoordinatorAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoordinatorAssessment'], meta: { name: 'CoordinatorAssessment' } }
    /**
     * Find zero or one CoordinatorAssessment that matches the filter.
     * @param {CoordinatorAssessmentFindUniqueArgs} args - Arguments to find a CoordinatorAssessment
     * @example
     * // Get one CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoordinatorAssessmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentFindUniqueArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CoordinatorAssessment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CoordinatorAssessmentFindUniqueOrThrowArgs} args - Arguments to find a CoordinatorAssessment
     * @example
     * // Get one CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoordinatorAssessmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CoordinatorAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentFindFirstArgs} args - Arguments to find a CoordinatorAssessment
     * @example
     * // Get one CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoordinatorAssessmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentFindFirstArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CoordinatorAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentFindFirstOrThrowArgs} args - Arguments to find a CoordinatorAssessment
     * @example
     * // Get one CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoordinatorAssessmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CoordinatorAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoordinatorAssessments
     * const coordinatorAssessments = await prisma.coordinatorAssessment.findMany()
     * 
     * // Get first 10 CoordinatorAssessments
     * const coordinatorAssessments = await prisma.coordinatorAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coordinatorAssessmentWithIdOnly = await prisma.coordinatorAssessment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoordinatorAssessmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CoordinatorAssessment.
     * @param {CoordinatorAssessmentCreateArgs} args - Arguments to create a CoordinatorAssessment.
     * @example
     * // Create one CoordinatorAssessment
     * const CoordinatorAssessment = await prisma.coordinatorAssessment.create({
     *   data: {
     *     // ... data to create a CoordinatorAssessment
     *   }
     * })
     * 
    **/
    create<T extends CoordinatorAssessmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentCreateArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CoordinatorAssessments.
     *     @param {CoordinatorAssessmentCreateManyArgs} args - Arguments to create many CoordinatorAssessments.
     *     @example
     *     // Create many CoordinatorAssessments
     *     const coordinatorAssessment = await prisma.coordinatorAssessment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CoordinatorAssessmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CoordinatorAssessment.
     * @param {CoordinatorAssessmentDeleteArgs} args - Arguments to delete one CoordinatorAssessment.
     * @example
     * // Delete one CoordinatorAssessment
     * const CoordinatorAssessment = await prisma.coordinatorAssessment.delete({
     *   where: {
     *     // ... filter to delete one CoordinatorAssessment
     *   }
     * })
     * 
    **/
    delete<T extends CoordinatorAssessmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentDeleteArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CoordinatorAssessment.
     * @param {CoordinatorAssessmentUpdateArgs} args - Arguments to update one CoordinatorAssessment.
     * @example
     * // Update one CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoordinatorAssessmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentUpdateArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CoordinatorAssessments.
     * @param {CoordinatorAssessmentDeleteManyArgs} args - Arguments to filter CoordinatorAssessments to delete.
     * @example
     * // Delete a few CoordinatorAssessments
     * const { count } = await prisma.coordinatorAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoordinatorAssessmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorAssessmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoordinatorAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoordinatorAssessments
     * const coordinatorAssessment = await prisma.coordinatorAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoordinatorAssessmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CoordinatorAssessment.
     * @param {CoordinatorAssessmentUpsertArgs} args - Arguments to update or create a CoordinatorAssessment.
     * @example
     * // Update or create a CoordinatorAssessment
     * const coordinatorAssessment = await prisma.coordinatorAssessment.upsert({
     *   create: {
     *     // ... data to create a CoordinatorAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoordinatorAssessment we want to update
     *   }
     * })
    **/
    upsert<T extends CoordinatorAssessmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorAssessmentUpsertArgs<ExtArgs>>
    ): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CoordinatorAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentCountArgs} args - Arguments to filter CoordinatorAssessments to count.
     * @example
     * // Count the number of CoordinatorAssessments
     * const count = await prisma.coordinatorAssessment.count({
     *   where: {
     *     // ... the filter for the CoordinatorAssessments we want to count
     *   }
     * })
    **/
    count<T extends CoordinatorAssessmentCountArgs>(
      args?: Subset<T, CoordinatorAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoordinatorAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoordinatorAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoordinatorAssessmentAggregateArgs>(args: Subset<T, CoordinatorAssessmentAggregateArgs>): Prisma.PrismaPromise<GetCoordinatorAssessmentAggregateType<T>>

    /**
     * Group by CoordinatorAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoordinatorAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoordinatorAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: CoordinatorAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoordinatorAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoordinatorAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoordinatorAssessment model
   */
  readonly fields: CoordinatorAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoordinatorAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoordinatorAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends CoordinatorAssessment$studentArgs<ExtArgs> = {}>(args?: Subset<T, CoordinatorAssessment$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    coordinator<T extends CoordinatorAssessment$coordinatorArgs<ExtArgs> = {}>(args?: Subset<T, CoordinatorAssessment$coordinatorArgs<ExtArgs>>): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CoordinatorAssessment model
   */ 
  interface CoordinatorAssessmentFieldRefs {
    readonly id: FieldRef<"CoordinatorAssessment", 'Int'>
    readonly qualityOfStudentInternshipReport: FieldRef<"CoordinatorAssessment", 'Scores'>
    readonly experienceGained: FieldRef<"CoordinatorAssessment", 'Scores'>
    readonly presentation: FieldRef<"CoordinatorAssessment", 'Scores'>
    readonly visualPresentationAid: FieldRef<"CoordinatorAssessment", 'Scores'>
    readonly overalAssessmentResult: FieldRef<"CoordinatorAssessment", 'Scores'>
    readonly studentId: FieldRef<"CoordinatorAssessment", 'Int'>
    readonly coordinatorId: FieldRef<"CoordinatorAssessment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CoordinatorAssessment findUnique
   */
  export type CoordinatorAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CoordinatorAssessment to fetch.
     */
    where: CoordinatorAssessmentWhereUniqueInput
  }


  /**
   * CoordinatorAssessment findUniqueOrThrow
   */
  export type CoordinatorAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CoordinatorAssessment to fetch.
     */
    where: CoordinatorAssessmentWhereUniqueInput
  }


  /**
   * CoordinatorAssessment findFirst
   */
  export type CoordinatorAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CoordinatorAssessment to fetch.
     */
    where?: CoordinatorAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoordinatorAssessments to fetch.
     */
    orderBy?: CoordinatorAssessmentOrderByWithRelationInput | CoordinatorAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoordinatorAssessments.
     */
    cursor?: CoordinatorAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoordinatorAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoordinatorAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoordinatorAssessments.
     */
    distinct?: CoordinatorAssessmentScalarFieldEnum | CoordinatorAssessmentScalarFieldEnum[]
  }


  /**
   * CoordinatorAssessment findFirstOrThrow
   */
  export type CoordinatorAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CoordinatorAssessment to fetch.
     */
    where?: CoordinatorAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoordinatorAssessments to fetch.
     */
    orderBy?: CoordinatorAssessmentOrderByWithRelationInput | CoordinatorAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoordinatorAssessments.
     */
    cursor?: CoordinatorAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoordinatorAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoordinatorAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoordinatorAssessments.
     */
    distinct?: CoordinatorAssessmentScalarFieldEnum | CoordinatorAssessmentScalarFieldEnum[]
  }


  /**
   * CoordinatorAssessment findMany
   */
  export type CoordinatorAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which CoordinatorAssessments to fetch.
     */
    where?: CoordinatorAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoordinatorAssessments to fetch.
     */
    orderBy?: CoordinatorAssessmentOrderByWithRelationInput | CoordinatorAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoordinatorAssessments.
     */
    cursor?: CoordinatorAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoordinatorAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoordinatorAssessments.
     */
    skip?: number
    distinct?: CoordinatorAssessmentScalarFieldEnum | CoordinatorAssessmentScalarFieldEnum[]
  }


  /**
   * CoordinatorAssessment create
   */
  export type CoordinatorAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a CoordinatorAssessment.
     */
    data: XOR<CoordinatorAssessmentCreateInput, CoordinatorAssessmentUncheckedCreateInput>
  }


  /**
   * CoordinatorAssessment createMany
   */
  export type CoordinatorAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoordinatorAssessments.
     */
    data: CoordinatorAssessmentCreateManyInput | CoordinatorAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CoordinatorAssessment update
   */
  export type CoordinatorAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a CoordinatorAssessment.
     */
    data: XOR<CoordinatorAssessmentUpdateInput, CoordinatorAssessmentUncheckedUpdateInput>
    /**
     * Choose, which CoordinatorAssessment to update.
     */
    where: CoordinatorAssessmentWhereUniqueInput
  }


  /**
   * CoordinatorAssessment updateMany
   */
  export type CoordinatorAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoordinatorAssessments.
     */
    data: XOR<CoordinatorAssessmentUpdateManyMutationInput, CoordinatorAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which CoordinatorAssessments to update
     */
    where?: CoordinatorAssessmentWhereInput
  }


  /**
   * CoordinatorAssessment upsert
   */
  export type CoordinatorAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the CoordinatorAssessment to update in case it exists.
     */
    where: CoordinatorAssessmentWhereUniqueInput
    /**
     * In case the CoordinatorAssessment found by the `where` argument doesn't exist, create a new CoordinatorAssessment with this data.
     */
    create: XOR<CoordinatorAssessmentCreateInput, CoordinatorAssessmentUncheckedCreateInput>
    /**
     * In case the CoordinatorAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoordinatorAssessmentUpdateInput, CoordinatorAssessmentUncheckedUpdateInput>
  }


  /**
   * CoordinatorAssessment delete
   */
  export type CoordinatorAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    /**
     * Filter which CoordinatorAssessment to delete.
     */
    where: CoordinatorAssessmentWhereUniqueInput
  }


  /**
   * CoordinatorAssessment deleteMany
   */
  export type CoordinatorAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoordinatorAssessments to delete
     */
    where?: CoordinatorAssessmentWhereInput
  }


  /**
   * CoordinatorAssessment.student
   */
  export type CoordinatorAssessment$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }


  /**
   * CoordinatorAssessment.coordinator
   */
  export type CoordinatorAssessment$coordinatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    where?: CoordinatorWhereInput
  }


  /**
   * CoordinatorAssessment without action
   */
  export type CoordinatorAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
  }



  /**
   * Model SuperviserAssessment
   */

  export type AggregateSuperviserAssessment = {
    _count: SuperviserAssessmentCountAggregateOutputType | null
    _avg: SuperviserAssessmentAvgAggregateOutputType | null
    _sum: SuperviserAssessmentSumAggregateOutputType | null
    _min: SuperviserAssessmentMinAggregateOutputType | null
    _max: SuperviserAssessmentMaxAggregateOutputType | null
  }

  export type SuperviserAssessmentAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    superviserId: number | null
  }

  export type SuperviserAssessmentSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    superviserId: number | null
  }

  export type SuperviserAssessmentMinAggregateOutputType = {
    id: number | null
    qualityOfStudentInternshipReport: $Enums.Scores | null
    experienceGained: $Enums.Scores | null
    presentation: $Enums.Scores | null
    visualPresentationAid: $Enums.Scores | null
    overalAssessmentResult: $Enums.Scores | null
    studentId: number | null
    superviserId: number | null
  }

  export type SuperviserAssessmentMaxAggregateOutputType = {
    id: number | null
    qualityOfStudentInternshipReport: $Enums.Scores | null
    experienceGained: $Enums.Scores | null
    presentation: $Enums.Scores | null
    visualPresentationAid: $Enums.Scores | null
    overalAssessmentResult: $Enums.Scores | null
    studentId: number | null
    superviserId: number | null
  }

  export type SuperviserAssessmentCountAggregateOutputType = {
    id: number
    qualityOfStudentInternshipReport: number
    experienceGained: number
    presentation: number
    visualPresentationAid: number
    overalAssessmentResult: number
    studentId: number
    superviserId: number
    _all: number
  }


  export type SuperviserAssessmentAvgAggregateInputType = {
    id?: true
    studentId?: true
    superviserId?: true
  }

  export type SuperviserAssessmentSumAggregateInputType = {
    id?: true
    studentId?: true
    superviserId?: true
  }

  export type SuperviserAssessmentMinAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    superviserId?: true
  }

  export type SuperviserAssessmentMaxAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    superviserId?: true
  }

  export type SuperviserAssessmentCountAggregateInputType = {
    id?: true
    qualityOfStudentInternshipReport?: true
    experienceGained?: true
    presentation?: true
    visualPresentationAid?: true
    overalAssessmentResult?: true
    studentId?: true
    superviserId?: true
    _all?: true
  }

  export type SuperviserAssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperviserAssessment to aggregate.
     */
    where?: SuperviserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperviserAssessments to fetch.
     */
    orderBy?: SuperviserAssessmentOrderByWithRelationInput | SuperviserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuperviserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperviserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperviserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuperviserAssessments
    **/
    _count?: true | SuperviserAssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuperviserAssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuperviserAssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperviserAssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperviserAssessmentMaxAggregateInputType
  }

  export type GetSuperviserAssessmentAggregateType<T extends SuperviserAssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperviserAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperviserAssessment[P]>
      : GetScalarType<T[P], AggregateSuperviserAssessment[P]>
  }




  export type SuperviserAssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperviserAssessmentWhereInput
    orderBy?: SuperviserAssessmentOrderByWithAggregationInput | SuperviserAssessmentOrderByWithAggregationInput[]
    by: SuperviserAssessmentScalarFieldEnum[] | SuperviserAssessmentScalarFieldEnum
    having?: SuperviserAssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperviserAssessmentCountAggregateInputType | true
    _avg?: SuperviserAssessmentAvgAggregateInputType
    _sum?: SuperviserAssessmentSumAggregateInputType
    _min?: SuperviserAssessmentMinAggregateInputType
    _max?: SuperviserAssessmentMaxAggregateInputType
  }

  export type SuperviserAssessmentGroupByOutputType = {
    id: number
    qualityOfStudentInternshipReport: $Enums.Scores
    experienceGained: $Enums.Scores
    presentation: $Enums.Scores
    visualPresentationAid: $Enums.Scores
    overalAssessmentResult: $Enums.Scores
    studentId: number
    superviserId: number
    _count: SuperviserAssessmentCountAggregateOutputType | null
    _avg: SuperviserAssessmentAvgAggregateOutputType | null
    _sum: SuperviserAssessmentSumAggregateOutputType | null
    _min: SuperviserAssessmentMinAggregateOutputType | null
    _max: SuperviserAssessmentMaxAggregateOutputType | null
  }

  type GetSuperviserAssessmentGroupByPayload<T extends SuperviserAssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperviserAssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperviserAssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperviserAssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], SuperviserAssessmentGroupByOutputType[P]>
        }
      >
    >


  export type SuperviserAssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qualityOfStudentInternshipReport?: boolean
    experienceGained?: boolean
    presentation?: boolean
    visualPresentationAid?: boolean
    overalAssessmentResult?: boolean
    studentId?: boolean
    superviserId?: boolean
    student?: boolean | SuperviserAssessment$studentArgs<ExtArgs>
    superviser?: boolean | SuperviserAssessment$superviserArgs<ExtArgs>
  }, ExtArgs["result"]["superviserAssessment"]>

  export type SuperviserAssessmentSelectScalar = {
    id?: boolean
    qualityOfStudentInternshipReport?: boolean
    experienceGained?: boolean
    presentation?: boolean
    visualPresentationAid?: boolean
    overalAssessmentResult?: boolean
    studentId?: boolean
    superviserId?: boolean
  }

  export type SuperviserAssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | SuperviserAssessment$studentArgs<ExtArgs>
    superviser?: boolean | SuperviserAssessment$superviserArgs<ExtArgs>
  }


  export type $SuperviserAssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SuperviserAssessment"
    objects: {
      student: Prisma.$StudentPayload<ExtArgs> | null
      superviser: Prisma.$SuperviserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      qualityOfStudentInternshipReport: $Enums.Scores
      experienceGained: $Enums.Scores
      presentation: $Enums.Scores
      visualPresentationAid: $Enums.Scores
      overalAssessmentResult: $Enums.Scores
      studentId: number
      superviserId: number
    }, ExtArgs["result"]["superviserAssessment"]>
    composites: {}
  }


  type SuperviserAssessmentGetPayload<S extends boolean | null | undefined | SuperviserAssessmentDefaultArgs> = $Result.GetResult<Prisma.$SuperviserAssessmentPayload, S>

  type SuperviserAssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SuperviserAssessmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SuperviserAssessmentCountAggregateInputType | true
    }

  export interface SuperviserAssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuperviserAssessment'], meta: { name: 'SuperviserAssessment' } }
    /**
     * Find zero or one SuperviserAssessment that matches the filter.
     * @param {SuperviserAssessmentFindUniqueArgs} args - Arguments to find a SuperviserAssessment
     * @example
     * // Get one SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuperviserAssessmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentFindUniqueArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SuperviserAssessment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SuperviserAssessmentFindUniqueOrThrowArgs} args - Arguments to find a SuperviserAssessment
     * @example
     * // Get one SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuperviserAssessmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SuperviserAssessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentFindFirstArgs} args - Arguments to find a SuperviserAssessment
     * @example
     * // Get one SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuperviserAssessmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentFindFirstArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SuperviserAssessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentFindFirstOrThrowArgs} args - Arguments to find a SuperviserAssessment
     * @example
     * // Get one SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuperviserAssessmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SuperviserAssessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuperviserAssessments
     * const superviserAssessments = await prisma.superviserAssessment.findMany()
     * 
     * // Get first 10 SuperviserAssessments
     * const superviserAssessments = await prisma.superviserAssessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superviserAssessmentWithIdOnly = await prisma.superviserAssessment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuperviserAssessmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SuperviserAssessment.
     * @param {SuperviserAssessmentCreateArgs} args - Arguments to create a SuperviserAssessment.
     * @example
     * // Create one SuperviserAssessment
     * const SuperviserAssessment = await prisma.superviserAssessment.create({
     *   data: {
     *     // ... data to create a SuperviserAssessment
     *   }
     * })
     * 
    **/
    create<T extends SuperviserAssessmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentCreateArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SuperviserAssessments.
     *     @param {SuperviserAssessmentCreateManyArgs} args - Arguments to create many SuperviserAssessments.
     *     @example
     *     // Create many SuperviserAssessments
     *     const superviserAssessment = await prisma.superviserAssessment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuperviserAssessmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SuperviserAssessment.
     * @param {SuperviserAssessmentDeleteArgs} args - Arguments to delete one SuperviserAssessment.
     * @example
     * // Delete one SuperviserAssessment
     * const SuperviserAssessment = await prisma.superviserAssessment.delete({
     *   where: {
     *     // ... filter to delete one SuperviserAssessment
     *   }
     * })
     * 
    **/
    delete<T extends SuperviserAssessmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentDeleteArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SuperviserAssessment.
     * @param {SuperviserAssessmentUpdateArgs} args - Arguments to update one SuperviserAssessment.
     * @example
     * // Update one SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuperviserAssessmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentUpdateArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SuperviserAssessments.
     * @param {SuperviserAssessmentDeleteManyArgs} args - Arguments to filter SuperviserAssessments to delete.
     * @example
     * // Delete a few SuperviserAssessments
     * const { count } = await prisma.superviserAssessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuperviserAssessmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserAssessmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuperviserAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuperviserAssessments
     * const superviserAssessment = await prisma.superviserAssessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuperviserAssessmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SuperviserAssessment.
     * @param {SuperviserAssessmentUpsertArgs} args - Arguments to update or create a SuperviserAssessment.
     * @example
     * // Update or create a SuperviserAssessment
     * const superviserAssessment = await prisma.superviserAssessment.upsert({
     *   create: {
     *     // ... data to create a SuperviserAssessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuperviserAssessment we want to update
     *   }
     * })
    **/
    upsert<T extends SuperviserAssessmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserAssessmentUpsertArgs<ExtArgs>>
    ): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SuperviserAssessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentCountArgs} args - Arguments to filter SuperviserAssessments to count.
     * @example
     * // Count the number of SuperviserAssessments
     * const count = await prisma.superviserAssessment.count({
     *   where: {
     *     // ... the filter for the SuperviserAssessments we want to count
     *   }
     * })
    **/
    count<T extends SuperviserAssessmentCountArgs>(
      args?: Subset<T, SuperviserAssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperviserAssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuperviserAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperviserAssessmentAggregateArgs>(args: Subset<T, SuperviserAssessmentAggregateArgs>): Prisma.PrismaPromise<GetSuperviserAssessmentAggregateType<T>>

    /**
     * Group by SuperviserAssessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuperviserAssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuperviserAssessmentGroupByArgs['orderBy'] }
        : { orderBy?: SuperviserAssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuperviserAssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperviserAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SuperviserAssessment model
   */
  readonly fields: SuperviserAssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SuperviserAssessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuperviserAssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends SuperviserAssessment$studentArgs<ExtArgs> = {}>(args?: Subset<T, SuperviserAssessment$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    superviser<T extends SuperviserAssessment$superviserArgs<ExtArgs> = {}>(args?: Subset<T, SuperviserAssessment$superviserArgs<ExtArgs>>): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SuperviserAssessment model
   */ 
  interface SuperviserAssessmentFieldRefs {
    readonly id: FieldRef<"SuperviserAssessment", 'Int'>
    readonly qualityOfStudentInternshipReport: FieldRef<"SuperviserAssessment", 'Scores'>
    readonly experienceGained: FieldRef<"SuperviserAssessment", 'Scores'>
    readonly presentation: FieldRef<"SuperviserAssessment", 'Scores'>
    readonly visualPresentationAid: FieldRef<"SuperviserAssessment", 'Scores'>
    readonly overalAssessmentResult: FieldRef<"SuperviserAssessment", 'Scores'>
    readonly studentId: FieldRef<"SuperviserAssessment", 'Int'>
    readonly superviserId: FieldRef<"SuperviserAssessment", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SuperviserAssessment findUnique
   */
  export type SuperviserAssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SuperviserAssessment to fetch.
     */
    where: SuperviserAssessmentWhereUniqueInput
  }


  /**
   * SuperviserAssessment findUniqueOrThrow
   */
  export type SuperviserAssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SuperviserAssessment to fetch.
     */
    where: SuperviserAssessmentWhereUniqueInput
  }


  /**
   * SuperviserAssessment findFirst
   */
  export type SuperviserAssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SuperviserAssessment to fetch.
     */
    where?: SuperviserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperviserAssessments to fetch.
     */
    orderBy?: SuperviserAssessmentOrderByWithRelationInput | SuperviserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperviserAssessments.
     */
    cursor?: SuperviserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperviserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperviserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperviserAssessments.
     */
    distinct?: SuperviserAssessmentScalarFieldEnum | SuperviserAssessmentScalarFieldEnum[]
  }


  /**
   * SuperviserAssessment findFirstOrThrow
   */
  export type SuperviserAssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SuperviserAssessment to fetch.
     */
    where?: SuperviserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperviserAssessments to fetch.
     */
    orderBy?: SuperviserAssessmentOrderByWithRelationInput | SuperviserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuperviserAssessments.
     */
    cursor?: SuperviserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperviserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperviserAssessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuperviserAssessments.
     */
    distinct?: SuperviserAssessmentScalarFieldEnum | SuperviserAssessmentScalarFieldEnum[]
  }


  /**
   * SuperviserAssessment findMany
   */
  export type SuperviserAssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter, which SuperviserAssessments to fetch.
     */
    where?: SuperviserAssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuperviserAssessments to fetch.
     */
    orderBy?: SuperviserAssessmentOrderByWithRelationInput | SuperviserAssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuperviserAssessments.
     */
    cursor?: SuperviserAssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuperviserAssessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuperviserAssessments.
     */
    skip?: number
    distinct?: SuperviserAssessmentScalarFieldEnum | SuperviserAssessmentScalarFieldEnum[]
  }


  /**
   * SuperviserAssessment create
   */
  export type SuperviserAssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a SuperviserAssessment.
     */
    data: XOR<SuperviserAssessmentCreateInput, SuperviserAssessmentUncheckedCreateInput>
  }


  /**
   * SuperviserAssessment createMany
   */
  export type SuperviserAssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuperviserAssessments.
     */
    data: SuperviserAssessmentCreateManyInput | SuperviserAssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SuperviserAssessment update
   */
  export type SuperviserAssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a SuperviserAssessment.
     */
    data: XOR<SuperviserAssessmentUpdateInput, SuperviserAssessmentUncheckedUpdateInput>
    /**
     * Choose, which SuperviserAssessment to update.
     */
    where: SuperviserAssessmentWhereUniqueInput
  }


  /**
   * SuperviserAssessment updateMany
   */
  export type SuperviserAssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuperviserAssessments.
     */
    data: XOR<SuperviserAssessmentUpdateManyMutationInput, SuperviserAssessmentUncheckedUpdateManyInput>
    /**
     * Filter which SuperviserAssessments to update
     */
    where?: SuperviserAssessmentWhereInput
  }


  /**
   * SuperviserAssessment upsert
   */
  export type SuperviserAssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the SuperviserAssessment to update in case it exists.
     */
    where: SuperviserAssessmentWhereUniqueInput
    /**
     * In case the SuperviserAssessment found by the `where` argument doesn't exist, create a new SuperviserAssessment with this data.
     */
    create: XOR<SuperviserAssessmentCreateInput, SuperviserAssessmentUncheckedCreateInput>
    /**
     * In case the SuperviserAssessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuperviserAssessmentUpdateInput, SuperviserAssessmentUncheckedUpdateInput>
  }


  /**
   * SuperviserAssessment delete
   */
  export type SuperviserAssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    /**
     * Filter which SuperviserAssessment to delete.
     */
    where: SuperviserAssessmentWhereUniqueInput
  }


  /**
   * SuperviserAssessment deleteMany
   */
  export type SuperviserAssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuperviserAssessments to delete
     */
    where?: SuperviserAssessmentWhereInput
  }


  /**
   * SuperviserAssessment.student
   */
  export type SuperviserAssessment$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }


  /**
   * SuperviserAssessment.superviser
   */
  export type SuperviserAssessment$superviserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    where?: SuperviserWhereInput
  }


  /**
   * SuperviserAssessment without action
   */
  export type SuperviserAssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    email: string | null
    role: $Enums.Role | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hashedRT: string | null
    lastLoggedInTime: Date | null
    phone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    email: string | null
    role: $Enums.Role | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
    hashedRT: string | null
    lastLoggedInTime: Date | null
    phone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    email: number
    role: number
    hashedPassword: number
    createdAt: number
    updatedAt: number
    hashedRT: number
    lastLoggedInTime: number
    phone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    role?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    hashedRT?: true
    lastLoggedInTime?: true
    phone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    role?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    hashedRT?: true
    lastLoggedInTime?: true
    phone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    role?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
    hashedRT?: true
    lastLoggedInTime?: true
    phone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstname: string
    lastname: string
    email: string
    role: $Enums.Role
    hashedPassword: string
    createdAt: Date
    updatedAt: Date
    hashedRT: string | null
    lastLoggedInTime: Date | null
    phone: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    role?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hashedRT?: boolean
    lastLoggedInTime?: boolean
    phone?: boolean
    image?: boolean | User$imageArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    coordinator?: boolean | User$coordinatorArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    role?: boolean
    hashedPassword?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hashedRT?: boolean
    lastLoggedInTime?: boolean
    phone?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    image?: boolean | User$imageArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    coordinator?: boolean | User$coordinatorArgs<ExtArgs>
    supervisor?: boolean | User$supervisorArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      image: Prisma.$ImagePayload<ExtArgs> | null
      student: Prisma.$StudentPayload<ExtArgs> | null
      coordinator: Prisma.$CoordinatorPayload<ExtArgs> | null
      supervisor: Prisma.$SuperviserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstname: string
      lastname: string
      email: string
      role: $Enums.Role
      hashedPassword: string
      createdAt: Date
      updatedAt: Date
      hashedRT: string | null
      lastLoggedInTime: Date | null
      phone: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    image<T extends User$imageArgs<ExtArgs> = {}>(args?: Subset<T, User$imageArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    coordinator<T extends User$coordinatorArgs<ExtArgs> = {}>(args?: Subset<T, User$coordinatorArgs<ExtArgs>>): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    supervisor<T extends User$supervisorArgs<ExtArgs> = {}>(args?: Subset<T, User$supervisorArgs<ExtArgs>>): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly hashedRT: FieldRef<"User", 'String'>
    readonly lastLoggedInTime: FieldRef<"User", 'DateTime'>
    readonly phone: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.image
   */
  export type User$imageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
  }


  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }


  /**
   * User.coordinator
   */
  export type User$coordinatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    where?: CoordinatorWhereInput
  }


  /**
   * User.supervisor
   */
  export type User$supervisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    where?: SuperviserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
    studentNumber: number | null
    cassessmentId: number | null
    sassessmentId: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
    studentNumber: number | null
    cassessmentId: number | null
    sassessmentId: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
    email: string | null
    studentNumber: number | null
    cassessmentId: number | null
    sassessmentId: number | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
    email: string | null
    studentNumber: number | null
    cassessmentId: number | null
    sassessmentId: number | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    userId: number
    departmentId: number
    email: number
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    studentNumber?: true
    cassessmentId?: true
    sassessmentId?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    studentNumber?: true
    cassessmentId?: true
    sassessmentId?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    email?: true
    studentNumber?: true
    cassessmentId?: true
    sassessmentId?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    email?: true
    studentNumber?: true
    cassessmentId?: true
    sassessmentId?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
    email?: true
    studentNumber?: true
    cassessmentId?: true
    sassessmentId?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    email?: boolean
    studentNumber?: boolean
    cassessmentId?: boolean
    sassessmentId?: boolean
    applications?: boolean | Student$applicationsArgs<ExtArgs>
    cassessment?: boolean | Student$cassessmentArgs<ExtArgs>
    sassessment?: boolean | Student$sassessmentArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    userId?: boolean
    departmentId?: boolean
    email?: boolean
    studentNumber?: boolean
    cassessmentId?: boolean
    sassessmentId?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | Student$applicationsArgs<ExtArgs>
    cassessment?: boolean | Student$cassessmentArgs<ExtArgs>
    sassessment?: boolean | Student$sassessmentArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      cassessment: Prisma.$CoordinatorAssessmentPayload<ExtArgs> | null
      sassessment: Prisma.$SuperviserAssessmentPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      departmentId: number
      email: string
      studentNumber: number
      cassessmentId: number
      sassessmentId: number
    }, ExtArgs["result"]["student"]>
    composites: {}
  }


  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    applications<T extends Student$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Student$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    cassessment<T extends Student$cassessmentArgs<ExtArgs> = {}>(args?: Subset<T, Student$cassessmentArgs<ExtArgs>>): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    sassessment<T extends Student$sassessmentArgs<ExtArgs> = {}>(args?: Subset<T, Student$sassessmentArgs<ExtArgs>>): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'Int'>
    readonly userId: FieldRef<"Student", 'Int'>
    readonly departmentId: FieldRef<"Student", 'Int'>
    readonly email: FieldRef<"Student", 'String'>
    readonly studentNumber: FieldRef<"Student", 'Int'>
    readonly cassessmentId: FieldRef<"Student", 'Int'>
    readonly sassessmentId: FieldRef<"Student", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }


  /**
   * Student.applications
   */
  export type Student$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Student.cassessment
   */
  export type Student$cassessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    where?: CoordinatorAssessmentWhereInput
  }


  /**
   * Student.sassessment
   */
  export type Student$sassessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    where?: SuperviserAssessmentWhereInput
  }


  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
  }



  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: $Enums.DepartmentNames | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: $Enums.DepartmentNames | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: $Enums.DepartmentNames
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    coordinator?: boolean | Department$coordinatorArgs<ExtArgs>
    students?: boolean | Department$studentsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coordinator?: boolean | Department$coordinatorArgs<ExtArgs>
    students?: boolean | Department$studentsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      coordinator: Prisma.$CoordinatorPayload<ExtArgs> | null
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: $Enums.DepartmentNames
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }


  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DepartmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DepartmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DepartmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends DepartmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Departments.
     *     @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     *     @example
     *     // Create many Departments
     *     const department = await prisma.department.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DepartmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends DepartmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DepartmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DepartmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DepartmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends DepartmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>
    ): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    coordinator<T extends Department$coordinatorArgs<ExtArgs> = {}>(args?: Subset<T, Department$coordinatorArgs<ExtArgs>>): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    students<T extends Department$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Department$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'DepartmentNames'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }


  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }


  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }


  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }


  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }


  /**
   * Department.coordinator
   */
  export type Department$coordinatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    where?: CoordinatorWhereInput
  }


  /**
   * Department.students
   */
  export type Department$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }


  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
  }



  /**
   * Model Superviser
   */

  export type AggregateSuperviser = {
    _count: SuperviserCountAggregateOutputType | null
    _avg: SuperviserAvgAggregateOutputType | null
    _sum: SuperviserSumAggregateOutputType | null
    _min: SuperviserMinAggregateOutputType | null
    _max: SuperviserMaxAggregateOutputType | null
  }

  export type SuperviserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    coordinatorId: number | null
  }

  export type SuperviserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
    coordinatorId: number | null
  }

  export type SuperviserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    position: string | null
    companyId: number | null
    coordinatorId: number | null
  }

  export type SuperviserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    position: string | null
    companyId: number | null
    coordinatorId: number | null
  }

  export type SuperviserCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    position: number
    companyId: number
    coordinatorId: number
    _all: number
  }


  export type SuperviserAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    coordinatorId?: true
  }

  export type SuperviserSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
    coordinatorId?: true
  }

  export type SuperviserMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    position?: true
    companyId?: true
    coordinatorId?: true
  }

  export type SuperviserMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    position?: true
    companyId?: true
    coordinatorId?: true
  }

  export type SuperviserCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    position?: true
    companyId?: true
    coordinatorId?: true
    _all?: true
  }

  export type SuperviserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Superviser to aggregate.
     */
    where?: SuperviserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisers to fetch.
     */
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuperviserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Supervisers
    **/
    _count?: true | SuperviserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuperviserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuperviserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuperviserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuperviserMaxAggregateInputType
  }

  export type GetSuperviserAggregateType<T extends SuperviserAggregateArgs> = {
        [P in keyof T & keyof AggregateSuperviser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuperviser[P]>
      : GetScalarType<T[P], AggregateSuperviser[P]>
  }




  export type SuperviserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SuperviserWhereInput
    orderBy?: SuperviserOrderByWithAggregationInput | SuperviserOrderByWithAggregationInput[]
    by: SuperviserScalarFieldEnum[] | SuperviserScalarFieldEnum
    having?: SuperviserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuperviserCountAggregateInputType | true
    _avg?: SuperviserAvgAggregateInputType
    _sum?: SuperviserSumAggregateInputType
    _min?: SuperviserMinAggregateInputType
    _max?: SuperviserMaxAggregateInputType
  }

  export type SuperviserGroupByOutputType = {
    id: number
    userId: number
    email: string
    position: string
    companyId: number
    coordinatorId: number
    _count: SuperviserCountAggregateOutputType | null
    _avg: SuperviserAvgAggregateOutputType | null
    _sum: SuperviserSumAggregateOutputType | null
    _min: SuperviserMinAggregateOutputType | null
    _max: SuperviserMaxAggregateOutputType | null
  }

  type GetSuperviserGroupByPayload<T extends SuperviserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SuperviserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuperviserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuperviserGroupByOutputType[P]>
            : GetScalarType<T[P], SuperviserGroupByOutputType[P]>
        }
      >
    >


  export type SuperviserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    position?: boolean
    companyId?: boolean
    coordinatorId?: boolean
    assessment?: boolean | Superviser$assessmentArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    coordinator?: boolean | CoordinatorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["superviser"]>

  export type SuperviserSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    position?: boolean
    companyId?: boolean
    coordinatorId?: boolean
  }

  export type SuperviserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | Superviser$assessmentArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    coordinator?: boolean | CoordinatorDefaultArgs<ExtArgs>
  }


  export type $SuperviserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Superviser"
    objects: {
      assessment: Prisma.$SuperviserAssessmentPayload<ExtArgs> | null
      company: Prisma.$CompanyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      coordinator: Prisma.$CoordinatorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      email: string
      position: string
      companyId: number
      coordinatorId: number
    }, ExtArgs["result"]["superviser"]>
    composites: {}
  }


  type SuperviserGetPayload<S extends boolean | null | undefined | SuperviserDefaultArgs> = $Result.GetResult<Prisma.$SuperviserPayload, S>

  type SuperviserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SuperviserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SuperviserCountAggregateInputType | true
    }

  export interface SuperviserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Superviser'], meta: { name: 'Superviser' } }
    /**
     * Find zero or one Superviser that matches the filter.
     * @param {SuperviserFindUniqueArgs} args - Arguments to find a Superviser
     * @example
     * // Get one Superviser
     * const superviser = await prisma.superviser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuperviserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserFindUniqueArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Superviser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SuperviserFindUniqueOrThrowArgs} args - Arguments to find a Superviser
     * @example
     * // Get one Superviser
     * const superviser = await prisma.superviser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuperviserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Superviser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserFindFirstArgs} args - Arguments to find a Superviser
     * @example
     * // Get one Superviser
     * const superviser = await prisma.superviser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuperviserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserFindFirstArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Superviser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserFindFirstOrThrowArgs} args - Arguments to find a Superviser
     * @example
     * // Get one Superviser
     * const superviser = await prisma.superviser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuperviserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Supervisers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supervisers
     * const supervisers = await prisma.superviser.findMany()
     * 
     * // Get first 10 Supervisers
     * const supervisers = await prisma.superviser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const superviserWithIdOnly = await prisma.superviser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuperviserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Superviser.
     * @param {SuperviserCreateArgs} args - Arguments to create a Superviser.
     * @example
     * // Create one Superviser
     * const Superviser = await prisma.superviser.create({
     *   data: {
     *     // ... data to create a Superviser
     *   }
     * })
     * 
    **/
    create<T extends SuperviserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserCreateArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Supervisers.
     *     @param {SuperviserCreateManyArgs} args - Arguments to create many Supervisers.
     *     @example
     *     // Create many Supervisers
     *     const superviser = await prisma.superviser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuperviserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Superviser.
     * @param {SuperviserDeleteArgs} args - Arguments to delete one Superviser.
     * @example
     * // Delete one Superviser
     * const Superviser = await prisma.superviser.delete({
     *   where: {
     *     // ... filter to delete one Superviser
     *   }
     * })
     * 
    **/
    delete<T extends SuperviserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserDeleteArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Superviser.
     * @param {SuperviserUpdateArgs} args - Arguments to update one Superviser.
     * @example
     * // Update one Superviser
     * const superviser = await prisma.superviser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuperviserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserUpdateArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Supervisers.
     * @param {SuperviserDeleteManyArgs} args - Arguments to filter Supervisers to delete.
     * @example
     * // Delete a few Supervisers
     * const { count } = await prisma.superviser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuperviserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuperviserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supervisers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supervisers
     * const superviser = await prisma.superviser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuperviserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Superviser.
     * @param {SuperviserUpsertArgs} args - Arguments to update or create a Superviser.
     * @example
     * // Update or create a Superviser
     * const superviser = await prisma.superviser.upsert({
     *   create: {
     *     // ... data to create a Superviser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Superviser we want to update
     *   }
     * })
    **/
    upsert<T extends SuperviserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SuperviserUpsertArgs<ExtArgs>>
    ): Prisma__SuperviserClient<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Supervisers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserCountArgs} args - Arguments to filter Supervisers to count.
     * @example
     * // Count the number of Supervisers
     * const count = await prisma.superviser.count({
     *   where: {
     *     // ... the filter for the Supervisers we want to count
     *   }
     * })
    **/
    count<T extends SuperviserCountArgs>(
      args?: Subset<T, SuperviserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuperviserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Superviser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuperviserAggregateArgs>(args: Subset<T, SuperviserAggregateArgs>): Prisma.PrismaPromise<GetSuperviserAggregateType<T>>

    /**
     * Group by Superviser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuperviserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuperviserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuperviserGroupByArgs['orderBy'] }
        : { orderBy?: SuperviserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuperviserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperviserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Superviser model
   */
  readonly fields: SuperviserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Superviser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SuperviserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assessment<T extends Superviser$assessmentArgs<ExtArgs> = {}>(args?: Subset<T, Superviser$assessmentArgs<ExtArgs>>): Prisma__SuperviserAssessmentClient<$Result.GetResult<Prisma.$SuperviserAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    coordinator<T extends CoordinatorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoordinatorDefaultArgs<ExtArgs>>): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Superviser model
   */ 
  interface SuperviserFieldRefs {
    readonly id: FieldRef<"Superviser", 'Int'>
    readonly userId: FieldRef<"Superviser", 'Int'>
    readonly email: FieldRef<"Superviser", 'String'>
    readonly position: FieldRef<"Superviser", 'String'>
    readonly companyId: FieldRef<"Superviser", 'Int'>
    readonly coordinatorId: FieldRef<"Superviser", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Superviser findUnique
   */
  export type SuperviserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter, which Superviser to fetch.
     */
    where: SuperviserWhereUniqueInput
  }


  /**
   * Superviser findUniqueOrThrow
   */
  export type SuperviserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter, which Superviser to fetch.
     */
    where: SuperviserWhereUniqueInput
  }


  /**
   * Superviser findFirst
   */
  export type SuperviserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter, which Superviser to fetch.
     */
    where?: SuperviserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisers to fetch.
     */
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supervisers.
     */
    cursor?: SuperviserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supervisers.
     */
    distinct?: SuperviserScalarFieldEnum | SuperviserScalarFieldEnum[]
  }


  /**
   * Superviser findFirstOrThrow
   */
  export type SuperviserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter, which Superviser to fetch.
     */
    where?: SuperviserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisers to fetch.
     */
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supervisers.
     */
    cursor?: SuperviserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supervisers.
     */
    distinct?: SuperviserScalarFieldEnum | SuperviserScalarFieldEnum[]
  }


  /**
   * Superviser findMany
   */
  export type SuperviserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter, which Supervisers to fetch.
     */
    where?: SuperviserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supervisers to fetch.
     */
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Supervisers.
     */
    cursor?: SuperviserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supervisers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supervisers.
     */
    skip?: number
    distinct?: SuperviserScalarFieldEnum | SuperviserScalarFieldEnum[]
  }


  /**
   * Superviser create
   */
  export type SuperviserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * The data needed to create a Superviser.
     */
    data: XOR<SuperviserCreateInput, SuperviserUncheckedCreateInput>
  }


  /**
   * Superviser createMany
   */
  export type SuperviserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Supervisers.
     */
    data: SuperviserCreateManyInput | SuperviserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Superviser update
   */
  export type SuperviserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * The data needed to update a Superviser.
     */
    data: XOR<SuperviserUpdateInput, SuperviserUncheckedUpdateInput>
    /**
     * Choose, which Superviser to update.
     */
    where: SuperviserWhereUniqueInput
  }


  /**
   * Superviser updateMany
   */
  export type SuperviserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Supervisers.
     */
    data: XOR<SuperviserUpdateManyMutationInput, SuperviserUncheckedUpdateManyInput>
    /**
     * Filter which Supervisers to update
     */
    where?: SuperviserWhereInput
  }


  /**
   * Superviser upsert
   */
  export type SuperviserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * The filter to search for the Superviser to update in case it exists.
     */
    where: SuperviserWhereUniqueInput
    /**
     * In case the Superviser found by the `where` argument doesn't exist, create a new Superviser with this data.
     */
    create: XOR<SuperviserCreateInput, SuperviserUncheckedCreateInput>
    /**
     * In case the Superviser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuperviserUpdateInput, SuperviserUncheckedUpdateInput>
  }


  /**
   * Superviser delete
   */
  export type SuperviserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    /**
     * Filter which Superviser to delete.
     */
    where: SuperviserWhereUniqueInput
  }


  /**
   * Superviser deleteMany
   */
  export type SuperviserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supervisers to delete
     */
    where?: SuperviserWhereInput
  }


  /**
   * Superviser.assessment
   */
  export type Superviser$assessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuperviserAssessment
     */
    select?: SuperviserAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserAssessmentInclude<ExtArgs> | null
    where?: SuperviserAssessmentWhereInput
  }


  /**
   * Superviser without action
   */
  export type SuperviserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
  }



  /**
   * Model Coordinator
   */

  export type AggregateCoordinator = {
    _count: CoordinatorCountAggregateOutputType | null
    _avg: CoordinatorAvgAggregateOutputType | null
    _sum: CoordinatorSumAggregateOutputType | null
    _min: CoordinatorMinAggregateOutputType | null
    _max: CoordinatorMaxAggregateOutputType | null
  }

  export type CoordinatorAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
  }

  export type CoordinatorSumAggregateOutputType = {
    id: number | null
    userId: number | null
    departmentId: number | null
  }

  export type CoordinatorMinAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    departmentId: number | null
  }

  export type CoordinatorMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    email: string | null
    departmentId: number | null
  }

  export type CoordinatorCountAggregateOutputType = {
    id: number
    userId: number
    email: number
    departmentId: number
    _all: number
  }


  export type CoordinatorAvgAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
  }

  export type CoordinatorSumAggregateInputType = {
    id?: true
    userId?: true
    departmentId?: true
  }

  export type CoordinatorMinAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    departmentId?: true
  }

  export type CoordinatorMaxAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    departmentId?: true
  }

  export type CoordinatorCountAggregateInputType = {
    id?: true
    userId?: true
    email?: true
    departmentId?: true
    _all?: true
  }

  export type CoordinatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordinator to aggregate.
     */
    where?: CoordinatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinators to fetch.
     */
    orderBy?: CoordinatorOrderByWithRelationInput | CoordinatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoordinatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coordinators
    **/
    _count?: true | CoordinatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoordinatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoordinatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoordinatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoordinatorMaxAggregateInputType
  }

  export type GetCoordinatorAggregateType<T extends CoordinatorAggregateArgs> = {
        [P in keyof T & keyof AggregateCoordinator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoordinator[P]>
      : GetScalarType<T[P], AggregateCoordinator[P]>
  }




  export type CoordinatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoordinatorWhereInput
    orderBy?: CoordinatorOrderByWithAggregationInput | CoordinatorOrderByWithAggregationInput[]
    by: CoordinatorScalarFieldEnum[] | CoordinatorScalarFieldEnum
    having?: CoordinatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoordinatorCountAggregateInputType | true
    _avg?: CoordinatorAvgAggregateInputType
    _sum?: CoordinatorSumAggregateInputType
    _min?: CoordinatorMinAggregateInputType
    _max?: CoordinatorMaxAggregateInputType
  }

  export type CoordinatorGroupByOutputType = {
    id: number
    userId: number
    email: string
    departmentId: number | null
    _count: CoordinatorCountAggregateOutputType | null
    _avg: CoordinatorAvgAggregateOutputType | null
    _sum: CoordinatorSumAggregateOutputType | null
    _min: CoordinatorMinAggregateOutputType | null
    _max: CoordinatorMaxAggregateOutputType | null
  }

  type GetCoordinatorGroupByPayload<T extends CoordinatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoordinatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoordinatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoordinatorGroupByOutputType[P]>
            : GetScalarType<T[P], CoordinatorGroupByOutputType[P]>
        }
      >
    >


  export type CoordinatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    email?: boolean
    departmentId?: boolean
    assessment?: boolean | Coordinator$assessmentArgs<ExtArgs>
    department?: boolean | Coordinator$departmentArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    supervisers?: boolean | Coordinator$supervisersArgs<ExtArgs>
    _count?: boolean | CoordinatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coordinator"]>

  export type CoordinatorSelectScalar = {
    id?: boolean
    userId?: boolean
    email?: boolean
    departmentId?: boolean
  }

  export type CoordinatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | Coordinator$assessmentArgs<ExtArgs>
    department?: boolean | Coordinator$departmentArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    supervisers?: boolean | Coordinator$supervisersArgs<ExtArgs>
    _count?: boolean | CoordinatorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoordinatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coordinator"
    objects: {
      assessment: Prisma.$CoordinatorAssessmentPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
      supervisers: Prisma.$SuperviserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      email: string
      departmentId: number | null
    }, ExtArgs["result"]["coordinator"]>
    composites: {}
  }


  type CoordinatorGetPayload<S extends boolean | null | undefined | CoordinatorDefaultArgs> = $Result.GetResult<Prisma.$CoordinatorPayload, S>

  type CoordinatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoordinatorFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CoordinatorCountAggregateInputType | true
    }

  export interface CoordinatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coordinator'], meta: { name: 'Coordinator' } }
    /**
     * Find zero or one Coordinator that matches the filter.
     * @param {CoordinatorFindUniqueArgs} args - Arguments to find a Coordinator
     * @example
     * // Get one Coordinator
     * const coordinator = await prisma.coordinator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoordinatorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorFindUniqueArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coordinator that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CoordinatorFindUniqueOrThrowArgs} args - Arguments to find a Coordinator
     * @example
     * // Get one Coordinator
     * const coordinator = await prisma.coordinator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoordinatorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coordinator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorFindFirstArgs} args - Arguments to find a Coordinator
     * @example
     * // Get one Coordinator
     * const coordinator = await prisma.coordinator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoordinatorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorFindFirstArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coordinator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorFindFirstOrThrowArgs} args - Arguments to find a Coordinator
     * @example
     * // Get one Coordinator
     * const coordinator = await prisma.coordinator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoordinatorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coordinators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coordinators
     * const coordinators = await prisma.coordinator.findMany()
     * 
     * // Get first 10 Coordinators
     * const coordinators = await prisma.coordinator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coordinatorWithIdOnly = await prisma.coordinator.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoordinatorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coordinator.
     * @param {CoordinatorCreateArgs} args - Arguments to create a Coordinator.
     * @example
     * // Create one Coordinator
     * const Coordinator = await prisma.coordinator.create({
     *   data: {
     *     // ... data to create a Coordinator
     *   }
     * })
     * 
    **/
    create<T extends CoordinatorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorCreateArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Coordinators.
     *     @param {CoordinatorCreateManyArgs} args - Arguments to create many Coordinators.
     *     @example
     *     // Create many Coordinators
     *     const coordinator = await prisma.coordinator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CoordinatorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Coordinator.
     * @param {CoordinatorDeleteArgs} args - Arguments to delete one Coordinator.
     * @example
     * // Delete one Coordinator
     * const Coordinator = await prisma.coordinator.delete({
     *   where: {
     *     // ... filter to delete one Coordinator
     *   }
     * })
     * 
    **/
    delete<T extends CoordinatorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorDeleteArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coordinator.
     * @param {CoordinatorUpdateArgs} args - Arguments to update one Coordinator.
     * @example
     * // Update one Coordinator
     * const coordinator = await prisma.coordinator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoordinatorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorUpdateArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coordinators.
     * @param {CoordinatorDeleteManyArgs} args - Arguments to filter Coordinators to delete.
     * @example
     * // Delete a few Coordinators
     * const { count } = await prisma.coordinator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoordinatorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoordinatorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coordinators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coordinators
     * const coordinator = await prisma.coordinator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoordinatorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coordinator.
     * @param {CoordinatorUpsertArgs} args - Arguments to update or create a Coordinator.
     * @example
     * // Update or create a Coordinator
     * const coordinator = await prisma.coordinator.upsert({
     *   create: {
     *     // ... data to create a Coordinator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coordinator we want to update
     *   }
     * })
    **/
    upsert<T extends CoordinatorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoordinatorUpsertArgs<ExtArgs>>
    ): Prisma__CoordinatorClient<$Result.GetResult<Prisma.$CoordinatorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coordinators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorCountArgs} args - Arguments to filter Coordinators to count.
     * @example
     * // Count the number of Coordinators
     * const count = await prisma.coordinator.count({
     *   where: {
     *     // ... the filter for the Coordinators we want to count
     *   }
     * })
    **/
    count<T extends CoordinatorCountArgs>(
      args?: Subset<T, CoordinatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoordinatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coordinator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoordinatorAggregateArgs>(args: Subset<T, CoordinatorAggregateArgs>): Prisma.PrismaPromise<GetCoordinatorAggregateType<T>>

    /**
     * Group by Coordinator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoordinatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoordinatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoordinatorGroupByArgs['orderBy'] }
        : { orderBy?: CoordinatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoordinatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoordinatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coordinator model
   */
  readonly fields: CoordinatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coordinator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoordinatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    assessment<T extends Coordinator$assessmentArgs<ExtArgs> = {}>(args?: Subset<T, Coordinator$assessmentArgs<ExtArgs>>): Prisma__CoordinatorAssessmentClient<$Result.GetResult<Prisma.$CoordinatorAssessmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    department<T extends Coordinator$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Coordinator$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    supervisers<T extends Coordinator$supervisersArgs<ExtArgs> = {}>(args?: Subset<T, Coordinator$supervisersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coordinator model
   */ 
  interface CoordinatorFieldRefs {
    readonly id: FieldRef<"Coordinator", 'Int'>
    readonly userId: FieldRef<"Coordinator", 'Int'>
    readonly email: FieldRef<"Coordinator", 'String'>
    readonly departmentId: FieldRef<"Coordinator", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Coordinator findUnique
   */
  export type CoordinatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinator to fetch.
     */
    where: CoordinatorWhereUniqueInput
  }


  /**
   * Coordinator findUniqueOrThrow
   */
  export type CoordinatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinator to fetch.
     */
    where: CoordinatorWhereUniqueInput
  }


  /**
   * Coordinator findFirst
   */
  export type CoordinatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinator to fetch.
     */
    where?: CoordinatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinators to fetch.
     */
    orderBy?: CoordinatorOrderByWithRelationInput | CoordinatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordinators.
     */
    cursor?: CoordinatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordinators.
     */
    distinct?: CoordinatorScalarFieldEnum | CoordinatorScalarFieldEnum[]
  }


  /**
   * Coordinator findFirstOrThrow
   */
  export type CoordinatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinator to fetch.
     */
    where?: CoordinatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinators to fetch.
     */
    orderBy?: CoordinatorOrderByWithRelationInput | CoordinatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coordinators.
     */
    cursor?: CoordinatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coordinators.
     */
    distinct?: CoordinatorScalarFieldEnum | CoordinatorScalarFieldEnum[]
  }


  /**
   * Coordinator findMany
   */
  export type CoordinatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter, which Coordinators to fetch.
     */
    where?: CoordinatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coordinators to fetch.
     */
    orderBy?: CoordinatorOrderByWithRelationInput | CoordinatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coordinators.
     */
    cursor?: CoordinatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coordinators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coordinators.
     */
    skip?: number
    distinct?: CoordinatorScalarFieldEnum | CoordinatorScalarFieldEnum[]
  }


  /**
   * Coordinator create
   */
  export type CoordinatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Coordinator.
     */
    data: XOR<CoordinatorCreateInput, CoordinatorUncheckedCreateInput>
  }


  /**
   * Coordinator createMany
   */
  export type CoordinatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Coordinators.
     */
    data: CoordinatorCreateManyInput | CoordinatorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Coordinator update
   */
  export type CoordinatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Coordinator.
     */
    data: XOR<CoordinatorUpdateInput, CoordinatorUncheckedUpdateInput>
    /**
     * Choose, which Coordinator to update.
     */
    where: CoordinatorWhereUniqueInput
  }


  /**
   * Coordinator updateMany
   */
  export type CoordinatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coordinators.
     */
    data: XOR<CoordinatorUpdateManyMutationInput, CoordinatorUncheckedUpdateManyInput>
    /**
     * Filter which Coordinators to update
     */
    where?: CoordinatorWhereInput
  }


  /**
   * Coordinator upsert
   */
  export type CoordinatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Coordinator to update in case it exists.
     */
    where: CoordinatorWhereUniqueInput
    /**
     * In case the Coordinator found by the `where` argument doesn't exist, create a new Coordinator with this data.
     */
    create: XOR<CoordinatorCreateInput, CoordinatorUncheckedCreateInput>
    /**
     * In case the Coordinator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoordinatorUpdateInput, CoordinatorUncheckedUpdateInput>
  }


  /**
   * Coordinator delete
   */
  export type CoordinatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
    /**
     * Filter which Coordinator to delete.
     */
    where: CoordinatorWhereUniqueInput
  }


  /**
   * Coordinator deleteMany
   */
  export type CoordinatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coordinators to delete
     */
    where?: CoordinatorWhereInput
  }


  /**
   * Coordinator.assessment
   */
  export type Coordinator$assessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoordinatorAssessment
     */
    select?: CoordinatorAssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorAssessmentInclude<ExtArgs> | null
    where?: CoordinatorAssessmentWhereInput
  }


  /**
   * Coordinator.department
   */
  export type Coordinator$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }


  /**
   * Coordinator.supervisers
   */
  export type Coordinator$supervisersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    where?: SuperviserWhereInput
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    cursor?: SuperviserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuperviserScalarFieldEnum | SuperviserScalarFieldEnum[]
  }


  /**
   * Coordinator without action
   */
  export type CoordinatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coordinator
     */
    select?: CoordinatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoordinatorInclude<ExtArgs> | null
  }



  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    resumeId: number | null
    days: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    resumeId: number | null
    days: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    resumeId: number | null
    name: string | null
    days: number | null
    email: string | null
    cyprus: boolean | null
    isApproved: boolean | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    resumeId: number | null
    name: string | null
    days: number | null
    email: string | null
    cyprus: boolean | null
    isApproved: boolean | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    studentId: number
    resumeId: number
    name: number
    days: number
    email: number
    cyprus: number
    isApproved: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    studentId?: true
    resumeId?: true
    days?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    studentId?: true
    resumeId?: true
    days?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    studentId?: true
    resumeId?: true
    name?: true
    days?: true
    email?: true
    cyprus?: true
    isApproved?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    studentId?: true
    resumeId?: true
    name?: true
    days?: true
    email?: true
    cyprus?: true
    isApproved?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    studentId?: true
    resumeId?: true
    name?: true
    days?: true
    email?: true
    cyprus?: true
    isApproved?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: number
    studentId: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus: boolean | null
    isApproved: boolean
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    resumeId?: boolean
    name?: boolean
    days?: boolean
    email?: boolean
    cyprus?: boolean
    isApproved?: boolean
    insurance?: boolean | Application$insuranceArgs<ExtArgs>
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    studentId?: boolean
    resumeId?: boolean
    name?: boolean
    days?: boolean
    email?: boolean
    cyprus?: boolean
    isApproved?: boolean
  }

  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    insurance?: boolean | Application$insuranceArgs<ExtArgs>
    resume?: boolean | ResumeDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }


  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      insurance: Prisma.$ImagePayload<ExtArgs> | null
      resume: Prisma.$ResumePayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentId: number
      resumeId: number
      name: string
      days: number
      email: string
      cyprus: boolean | null
      isApproved: boolean
    }, ExtArgs["result"]["application"]>
    composites: {}
  }


  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ApplicationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Application that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ApplicationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ApplicationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
    **/
    create<T extends ApplicationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Applications.
     *     @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     *     @example
     *     // Create many Applications
     *     const application = await prisma.application.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ApplicationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
    **/
    delete<T extends ApplicationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ApplicationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ApplicationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ApplicationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
    **/
    upsert<T extends ApplicationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>
    ): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    insurance<T extends Application$insuranceArgs<ExtArgs> = {}>(args?: Subset<T, Application$insuranceArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    resume<T extends ResumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ResumeDefaultArgs<ExtArgs>>): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Application model
   */ 
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'Int'>
    readonly studentId: FieldRef<"Application", 'Int'>
    readonly resumeId: FieldRef<"Application", 'Int'>
    readonly name: FieldRef<"Application", 'String'>
    readonly days: FieldRef<"Application", 'Int'>
    readonly email: FieldRef<"Application", 'String'>
    readonly cyprus: FieldRef<"Application", 'Boolean'>
    readonly isApproved: FieldRef<"Application", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }


  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }


  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }


  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }


  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
  }


  /**
   * Application.insurance
   */
  export type Application$insuranceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
  }


  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
  }



  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
    postalAddr: number | null
    fax: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
    postalAddr: number | null
    fax: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    postalAddr: number | null
    fax: number | null
    telephoneNumber: string | null
    email: string | null
    webAddr: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    postalAddr: number | null
    fax: number | null
    telephoneNumber: string | null
    email: string | null
    webAddr: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    workingFields: number
    postalAddr: number
    fax: number
    telephoneNumber: number
    email: number
    webAddr: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    postalAddr?: true
    fax?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    postalAddr?: true
    fax?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    postalAddr?: true
    fax?: true
    telephoneNumber?: true
    email?: true
    webAddr?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    postalAddr?: true
    fax?: true
    telephoneNumber?: true
    email?: true
    webAddr?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    workingFields?: true
    postalAddr?: true
    fax?: true
    telephoneNumber?: true
    email?: true
    webAddr?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    workingFields: $Enums.WorkingFields[]
    postalAddr: number
    fax: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workingFields?: boolean
    postalAddr?: boolean
    fax?: boolean
    telephoneNumber?: boolean
    email?: boolean
    webAddr?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    superviser?: boolean | Company$superviserArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    workingFields?: boolean
    postalAddr?: boolean
    fax?: boolean
    telephoneNumber?: boolean
    email?: boolean
    webAddr?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    superviser?: boolean | Company$superviserArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      superviser: Prisma.$SuperviserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      workingFields: $Enums.WorkingFields[]
      postalAddr: number
      fax: number | null
      telephoneNumber: string
      email: string
      webAddr: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }


  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompanyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompanyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompanyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const company = await prisma.company.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompanyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>
    ): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    superviser<T extends Company$superviserArgs<ExtArgs> = {}>(args?: Subset<T, Company$superviserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SuperviserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly workingFields: FieldRef<"Company", 'WorkingFields[]'>
    readonly postalAddr: FieldRef<"Company", 'Int'>
    readonly fax: FieldRef<"Company", 'Int'>
    readonly telephoneNumber: FieldRef<"Company", 'String'>
    readonly email: FieldRef<"Company", 'String'>
    readonly webAddr: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }


  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }


  /**
   * Company.superviser
   */
  export type Company$superviserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Superviser
     */
    select?: SuperviserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuperviserInclude<ExtArgs> | null
    where?: SuperviserWhereInput
    orderBy?: SuperviserOrderByWithRelationInput | SuperviserOrderByWithRelationInput[]
    cursor?: SuperviserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SuperviserScalarFieldEnum | SuperviserScalarFieldEnum[]
  }


  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompanyInclude<ExtArgs> | null
  }



  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationAvgAggregateOutputType = {
    id: number | null
    try: number | null
  }

  export type VerificationSumAggregateOutputType = {
    id: number | null
    try: number | null
  }

  export type VerificationMinAggregateOutputType = {
    id: number | null
    email: string | null
    try: number | null
    code: string | null
    lastResendTime: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: number | null
    email: string | null
    try: number | null
    code: string | null
    lastResendTime: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    email: number
    try: number
    code: number
    lastResendTime: number
    _all: number
  }


  export type VerificationAvgAggregateInputType = {
    id?: true
    try?: true
  }

  export type VerificationSumAggregateInputType = {
    id?: true
    try?: true
  }

  export type VerificationMinAggregateInputType = {
    id?: true
    email?: true
    try?: true
    code?: true
    lastResendTime?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    email?: true
    try?: true
    code?: true
    lastResendTime?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    email?: true
    try?: true
    code?: true
    lastResendTime?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _avg?: VerificationAvgAggregateInputType
    _sum?: VerificationSumAggregateInputType
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: number
    email: string
    try: number
    code: string
    lastResendTime: Date
    _count: VerificationCountAggregateOutputType | null
    _avg: VerificationAvgAggregateOutputType | null
    _sum: VerificationSumAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    try?: boolean
    code?: boolean
    lastResendTime?: boolean
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    email?: boolean
    try?: boolean
    code?: boolean
    lastResendTime?: boolean
  }


  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      try: number
      code: string
      lastResendTime: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }


  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Verification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VerificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
    **/
    create<T extends VerificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Verifications.
     *     @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     *     @example
     *     // Create many Verifications
     *     const verification = await prisma.verification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
    **/
    delete<T extends VerificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Verification model
   */ 
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'Int'>
    readonly email: FieldRef<"Verification", 'String'>
    readonly try: FieldRef<"Verification", 'Int'>
    readonly code: FieldRef<"Verification", 'String'>
    readonly lastResendTime: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }


  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }


  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }


  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }


  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
  }


  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }


  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
  }


  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
  }



  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    applicationId: number | null
    size: number | null
  }

  export type ImageSumAggregateOutputType = {
    id: number | null
    userId: number | null
    applicationId: number | null
    size: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    applicationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isVerified: boolean | null
    size: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: number | null
    name: string | null
    userId: number | null
    applicationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isVerified: boolean | null
    size: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    applicationId: number
    createdAt: number
    updatedAt: number
    isVerified: number
    size: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    id?: true
    userId?: true
    applicationId?: true
    size?: true
  }

  export type ImageSumAggregateInputType = {
    id?: true
    userId?: true
    applicationId?: true
    size?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    size?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    size?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
    isVerified?: true
    size?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: number
    name: string
    userId: number
    applicationId: number
    createdAt: Date
    updatedAt: Date
    isVerified: boolean
    size: number
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    size?: boolean
    user?: boolean | Image$userArgs<ExtArgs>
    application?: boolean | Image$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isVerified?: boolean
    size?: boolean
  }

  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Image$userArgs<ExtArgs>
    application?: boolean | Image$applicationArgs<ExtArgs>
  }


  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      userId: number
      applicationId: number
      createdAt: Date
      updatedAt: Date
      isVerified: boolean
      size: number
    }, ExtArgs["result"]["image"]>
    composites: {}
  }


  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageCreateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Image$userArgs<ExtArgs> = {}>(args?: Subset<T, Image$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    application<T extends Image$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Image$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'Int'>
    readonly name: FieldRef<"Image", 'String'>
    readonly userId: FieldRef<"Image", 'Int'>
    readonly applicationId: FieldRef<"Image", 'Int'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
    readonly isVerified: FieldRef<"Image", 'Boolean'>
    readonly size: FieldRef<"Image", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }


  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }


  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
  }


  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }


  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }


  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
  }


  /**
   * Image.user
   */
  export type Image$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Image.application
   */
  export type Image$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }


  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ImageInclude<ExtArgs> | null
  }



  /**
   * Model Resume
   */

  export type AggregateResume = {
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  export type ResumeAvgAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type ResumeSumAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type ResumeMinAggregateOutputType = {
    id: number | null
    name: string | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    size: number | null
  }

  export type ResumeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    size: number | null
  }

  export type ResumeCountAggregateOutputType = {
    id: number
    name: number
    isVerified: number
    createdAt: number
    updatedAt: number
    size: number
    _all: number
  }


  export type ResumeAvgAggregateInputType = {
    id?: true
    size?: true
  }

  export type ResumeSumAggregateInputType = {
    id?: true
    size?: true
  }

  export type ResumeMinAggregateInputType = {
    id?: true
    name?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    size?: true
  }

  export type ResumeMaxAggregateInputType = {
    id?: true
    name?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    size?: true
  }

  export type ResumeCountAggregateInputType = {
    id?: true
    name?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    size?: true
    _all?: true
  }

  export type ResumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resume to aggregate.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Resumes
    **/
    _count?: true | ResumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResumeMaxAggregateInputType
  }

  export type GetResumeAggregateType<T extends ResumeAggregateArgs> = {
        [P in keyof T & keyof AggregateResume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResume[P]>
      : GetScalarType<T[P], AggregateResume[P]>
  }




  export type ResumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResumeWhereInput
    orderBy?: ResumeOrderByWithAggregationInput | ResumeOrderByWithAggregationInput[]
    by: ResumeScalarFieldEnum[] | ResumeScalarFieldEnum
    having?: ResumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResumeCountAggregateInputType | true
    _avg?: ResumeAvgAggregateInputType
    _sum?: ResumeSumAggregateInputType
    _min?: ResumeMinAggregateInputType
    _max?: ResumeMaxAggregateInputType
  }

  export type ResumeGroupByOutputType = {
    id: number
    name: string
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    size: number
    _count: ResumeCountAggregateOutputType | null
    _avg: ResumeAvgAggregateOutputType | null
    _sum: ResumeSumAggregateOutputType | null
    _min: ResumeMinAggregateOutputType | null
    _max: ResumeMaxAggregateOutputType | null
  }

  type GetResumeGroupByPayload<T extends ResumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResumeGroupByOutputType[P]>
            : GetScalarType<T[P], ResumeGroupByOutputType[P]>
        }
      >
    >


  export type ResumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    size?: boolean
    application?: boolean | Resume$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["resume"]>

  export type ResumeSelectScalar = {
    id?: boolean
    name?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    size?: boolean
  }

  export type ResumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | Resume$applicationArgs<ExtArgs>
  }


  export type $ResumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Resume"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
      size: number
    }, ExtArgs["result"]["resume"]>
    composites: {}
  }


  type ResumeGetPayload<S extends boolean | null | undefined | ResumeDefaultArgs> = $Result.GetResult<Prisma.$ResumePayload, S>

  type ResumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResumeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ResumeCountAggregateInputType | true
    }

  export interface ResumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Resume'], meta: { name: 'Resume' } }
    /**
     * Find zero or one Resume that matches the filter.
     * @param {ResumeFindUniqueArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ResumeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeFindUniqueArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Resume that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ResumeFindUniqueOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ResumeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Resume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ResumeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindFirstArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Resume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindFirstOrThrowArgs} args - Arguments to find a Resume
     * @example
     * // Get one Resume
     * const resume = await prisma.resume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ResumeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Resumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Resumes
     * const resumes = await prisma.resume.findMany()
     * 
     * // Get first 10 Resumes
     * const resumes = await prisma.resume.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const resumeWithIdOnly = await prisma.resume.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ResumeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Resume.
     * @param {ResumeCreateArgs} args - Arguments to create a Resume.
     * @example
     * // Create one Resume
     * const Resume = await prisma.resume.create({
     *   data: {
     *     // ... data to create a Resume
     *   }
     * })
     * 
    **/
    create<T extends ResumeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeCreateArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Resumes.
     *     @param {ResumeCreateManyArgs} args - Arguments to create many Resumes.
     *     @example
     *     // Create many Resumes
     *     const resume = await prisma.resume.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ResumeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Resume.
     * @param {ResumeDeleteArgs} args - Arguments to delete one Resume.
     * @example
     * // Delete one Resume
     * const Resume = await prisma.resume.delete({
     *   where: {
     *     // ... filter to delete one Resume
     *   }
     * })
     * 
    **/
    delete<T extends ResumeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeDeleteArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Resume.
     * @param {ResumeUpdateArgs} args - Arguments to update one Resume.
     * @example
     * // Update one Resume
     * const resume = await prisma.resume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ResumeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpdateArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Resumes.
     * @param {ResumeDeleteManyArgs} args - Arguments to filter Resumes to delete.
     * @example
     * // Delete a few Resumes
     * const { count } = await prisma.resume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ResumeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ResumeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Resumes
     * const resume = await prisma.resume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ResumeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Resume.
     * @param {ResumeUpsertArgs} args - Arguments to update or create a Resume.
     * @example
     * // Update or create a Resume
     * const resume = await prisma.resume.upsert({
     *   create: {
     *     // ... data to create a Resume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Resume we want to update
     *   }
     * })
    **/
    upsert<T extends ResumeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ResumeUpsertArgs<ExtArgs>>
    ): Prisma__ResumeClient<$Result.GetResult<Prisma.$ResumePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Resumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeCountArgs} args - Arguments to filter Resumes to count.
     * @example
     * // Count the number of Resumes
     * const count = await prisma.resume.count({
     *   where: {
     *     // ... the filter for the Resumes we want to count
     *   }
     * })
    **/
    count<T extends ResumeCountArgs>(
      args?: Subset<T, ResumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResumeAggregateArgs>(args: Subset<T, ResumeAggregateArgs>): Prisma.PrismaPromise<GetResumeAggregateType<T>>

    /**
     * Group by Resume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResumeGroupByArgs['orderBy'] }
        : { orderBy?: ResumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Resume model
   */
  readonly fields: ResumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Resume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    application<T extends Resume$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Resume$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Resume model
   */ 
  interface ResumeFieldRefs {
    readonly id: FieldRef<"Resume", 'Int'>
    readonly name: FieldRef<"Resume", 'String'>
    readonly isVerified: FieldRef<"Resume", 'Boolean'>
    readonly createdAt: FieldRef<"Resume", 'DateTime'>
    readonly updatedAt: FieldRef<"Resume", 'DateTime'>
    readonly size: FieldRef<"Resume", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Resume findUnique
   */
  export type ResumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume findUniqueOrThrow
   */
  export type ResumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume findFirst
   */
  export type ResumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume findFirstOrThrow
   */
  export type ResumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resume to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Resumes.
     */
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume findMany
   */
  export type ResumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter, which Resumes to fetch.
     */
    where?: ResumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Resumes to fetch.
     */
    orderBy?: ResumeOrderByWithRelationInput | ResumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Resumes.
     */
    cursor?: ResumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Resumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Resumes.
     */
    skip?: number
    distinct?: ResumeScalarFieldEnum | ResumeScalarFieldEnum[]
  }


  /**
   * Resume create
   */
  export type ResumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to create a Resume.
     */
    data: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
  }


  /**
   * Resume createMany
   */
  export type ResumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Resumes.
     */
    data: ResumeCreateManyInput | ResumeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Resume update
   */
  export type ResumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The data needed to update a Resume.
     */
    data: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
    /**
     * Choose, which Resume to update.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume updateMany
   */
  export type ResumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Resumes.
     */
    data: XOR<ResumeUpdateManyMutationInput, ResumeUncheckedUpdateManyInput>
    /**
     * Filter which Resumes to update
     */
    where?: ResumeWhereInput
  }


  /**
   * Resume upsert
   */
  export type ResumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * The filter to search for the Resume to update in case it exists.
     */
    where: ResumeWhereUniqueInput
    /**
     * In case the Resume found by the `where` argument doesn't exist, create a new Resume with this data.
     */
    create: XOR<ResumeCreateInput, ResumeUncheckedCreateInput>
    /**
     * In case the Resume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResumeUpdateInput, ResumeUncheckedUpdateInput>
  }


  /**
   * Resume delete
   */
  export type ResumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
    /**
     * Filter which Resume to delete.
     */
    where: ResumeWhereUniqueInput
  }


  /**
   * Resume deleteMany
   */
  export type ResumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Resumes to delete
     */
    where?: ResumeWhereInput
  }


  /**
   * Resume.application
   */
  export type Resume$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }


  /**
   * Resume without action
   */
  export type ResumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Resume
     */
    select?: ResumeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ResumeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CoordinatorAssessmentScalarFieldEnum: {
    id: 'id',
    qualityOfStudentInternshipReport: 'qualityOfStudentInternshipReport',
    experienceGained: 'experienceGained',
    presentation: 'presentation',
    visualPresentationAid: 'visualPresentationAid',
    overalAssessmentResult: 'overalAssessmentResult',
    studentId: 'studentId',
    coordinatorId: 'coordinatorId'
  };

  export type CoordinatorAssessmentScalarFieldEnum = (typeof CoordinatorAssessmentScalarFieldEnum)[keyof typeof CoordinatorAssessmentScalarFieldEnum]


  export const SuperviserAssessmentScalarFieldEnum: {
    id: 'id',
    qualityOfStudentInternshipReport: 'qualityOfStudentInternshipReport',
    experienceGained: 'experienceGained',
    presentation: 'presentation',
    visualPresentationAid: 'visualPresentationAid',
    overalAssessmentResult: 'overalAssessmentResult',
    studentId: 'studentId',
    superviserId: 'superviserId'
  };

  export type SuperviserAssessmentScalarFieldEnum = (typeof SuperviserAssessmentScalarFieldEnum)[keyof typeof SuperviserAssessmentScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    role: 'role',
    hashedPassword: 'hashedPassword',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    hashedRT: 'hashedRT',
    lastLoggedInTime: 'lastLoggedInTime',
    phone: 'phone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    departmentId: 'departmentId',
    email: 'email',
    studentNumber: 'studentNumber',
    cassessmentId: 'cassessmentId',
    sassessmentId: 'sassessmentId'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const SuperviserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    position: 'position',
    companyId: 'companyId',
    coordinatorId: 'coordinatorId'
  };

  export type SuperviserScalarFieldEnum = (typeof SuperviserScalarFieldEnum)[keyof typeof SuperviserScalarFieldEnum]


  export const CoordinatorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    email: 'email',
    departmentId: 'departmentId'
  };

  export type CoordinatorScalarFieldEnum = (typeof CoordinatorScalarFieldEnum)[keyof typeof CoordinatorScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    resumeId: 'resumeId',
    name: 'name',
    days: 'days',
    email: 'email',
    cyprus: 'cyprus',
    isApproved: 'isApproved'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    workingFields: 'workingFields',
    postalAddr: 'postalAddr',
    fax: 'fax',
    telephoneNumber: 'telephoneNumber',
    email: 'email',
    webAddr: 'webAddr',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    email: 'email',
    try: 'try',
    code: 'code',
    lastResendTime: 'lastResendTime'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    applicationId: 'applicationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isVerified: 'isVerified',
    size: 'size'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ResumeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    size: 'size'
  };

  export type ResumeScalarFieldEnum = (typeof ResumeScalarFieldEnum)[keyof typeof ResumeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Scores'
   */
  export type EnumScoresFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Scores'>
    


  /**
   * Reference to a field of type 'Scores[]'
   */
  export type ListEnumScoresFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Scores[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'DepartmentNames'
   */
  export type EnumDepartmentNamesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentNames'>
    


  /**
   * Reference to a field of type 'DepartmentNames[]'
   */
  export type ListEnumDepartmentNamesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentNames[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'WorkingFields[]'
   */
  export type ListEnumWorkingFieldsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkingFields[]'>
    


  /**
   * Reference to a field of type 'WorkingFields'
   */
  export type EnumWorkingFieldsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkingFields'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type CoordinatorAssessmentWhereInput = {
    AND?: CoordinatorAssessmentWhereInput | CoordinatorAssessmentWhereInput[]
    OR?: CoordinatorAssessmentWhereInput[]
    NOT?: CoordinatorAssessmentWhereInput | CoordinatorAssessmentWhereInput[]
    id?: IntFilter<"CoordinatorAssessment"> | number
    qualityOfStudentInternshipReport?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    presentation?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    studentId?: IntFilter<"CoordinatorAssessment"> | number
    coordinatorId?: IntFilter<"CoordinatorAssessment"> | number
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
  }

  export type CoordinatorAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
    student?: StudentOrderByWithRelationInput
    coordinator?: CoordinatorOrderByWithRelationInput
  }

  export type CoordinatorAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: number
    coordinatorId?: number
    AND?: CoordinatorAssessmentWhereInput | CoordinatorAssessmentWhereInput[]
    OR?: CoordinatorAssessmentWhereInput[]
    NOT?: CoordinatorAssessmentWhereInput | CoordinatorAssessmentWhereInput[]
    qualityOfStudentInternshipReport?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    presentation?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresFilter<"CoordinatorAssessment"> | $Enums.Scores
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
  }, "id" | "studentId" | "coordinatorId">

  export type CoordinatorAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
    _count?: CoordinatorAssessmentCountOrderByAggregateInput
    _avg?: CoordinatorAssessmentAvgOrderByAggregateInput
    _max?: CoordinatorAssessmentMaxOrderByAggregateInput
    _min?: CoordinatorAssessmentMinOrderByAggregateInput
    _sum?: CoordinatorAssessmentSumOrderByAggregateInput
  }

  export type CoordinatorAssessmentScalarWhereWithAggregatesInput = {
    AND?: CoordinatorAssessmentScalarWhereWithAggregatesInput | CoordinatorAssessmentScalarWhereWithAggregatesInput[]
    OR?: CoordinatorAssessmentScalarWhereWithAggregatesInput[]
    NOT?: CoordinatorAssessmentScalarWhereWithAggregatesInput | CoordinatorAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CoordinatorAssessment"> | number
    qualityOfStudentInternshipReport?: EnumScoresWithAggregatesFilter<"CoordinatorAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresWithAggregatesFilter<"CoordinatorAssessment"> | $Enums.Scores
    presentation?: EnumScoresWithAggregatesFilter<"CoordinatorAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresWithAggregatesFilter<"CoordinatorAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresWithAggregatesFilter<"CoordinatorAssessment"> | $Enums.Scores
    studentId?: IntWithAggregatesFilter<"CoordinatorAssessment"> | number
    coordinatorId?: IntWithAggregatesFilter<"CoordinatorAssessment"> | number
  }

  export type SuperviserAssessmentWhereInput = {
    AND?: SuperviserAssessmentWhereInput | SuperviserAssessmentWhereInput[]
    OR?: SuperviserAssessmentWhereInput[]
    NOT?: SuperviserAssessmentWhereInput | SuperviserAssessmentWhereInput[]
    id?: IntFilter<"SuperviserAssessment"> | number
    qualityOfStudentInternshipReport?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    presentation?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    studentId?: IntFilter<"SuperviserAssessment"> | number
    superviserId?: IntFilter<"SuperviserAssessment"> | number
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    superviser?: XOR<SuperviserNullableRelationFilter, SuperviserWhereInput> | null
  }

  export type SuperviserAssessmentOrderByWithRelationInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
    student?: StudentOrderByWithRelationInput
    superviser?: SuperviserOrderByWithRelationInput
  }

  export type SuperviserAssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: number
    superviserId?: number
    AND?: SuperviserAssessmentWhereInput | SuperviserAssessmentWhereInput[]
    OR?: SuperviserAssessmentWhereInput[]
    NOT?: SuperviserAssessmentWhereInput | SuperviserAssessmentWhereInput[]
    qualityOfStudentInternshipReport?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    presentation?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresFilter<"SuperviserAssessment"> | $Enums.Scores
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    superviser?: XOR<SuperviserNullableRelationFilter, SuperviserWhereInput> | null
  }, "id" | "studentId" | "superviserId">

  export type SuperviserAssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
    _count?: SuperviserAssessmentCountOrderByAggregateInput
    _avg?: SuperviserAssessmentAvgOrderByAggregateInput
    _max?: SuperviserAssessmentMaxOrderByAggregateInput
    _min?: SuperviserAssessmentMinOrderByAggregateInput
    _sum?: SuperviserAssessmentSumOrderByAggregateInput
  }

  export type SuperviserAssessmentScalarWhereWithAggregatesInput = {
    AND?: SuperviserAssessmentScalarWhereWithAggregatesInput | SuperviserAssessmentScalarWhereWithAggregatesInput[]
    OR?: SuperviserAssessmentScalarWhereWithAggregatesInput[]
    NOT?: SuperviserAssessmentScalarWhereWithAggregatesInput | SuperviserAssessmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SuperviserAssessment"> | number
    qualityOfStudentInternshipReport?: EnumScoresWithAggregatesFilter<"SuperviserAssessment"> | $Enums.Scores
    experienceGained?: EnumScoresWithAggregatesFilter<"SuperviserAssessment"> | $Enums.Scores
    presentation?: EnumScoresWithAggregatesFilter<"SuperviserAssessment"> | $Enums.Scores
    visualPresentationAid?: EnumScoresWithAggregatesFilter<"SuperviserAssessment"> | $Enums.Scores
    overalAssessmentResult?: EnumScoresWithAggregatesFilter<"SuperviserAssessment"> | $Enums.Scores
    studentId?: IntWithAggregatesFilter<"SuperviserAssessment"> | number
    superviserId?: IntWithAggregatesFilter<"SuperviserAssessment"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hashedRT?: StringNullableFilter<"User"> | string | null
    lastLoggedInTime?: DateTimeNullableFilter<"User"> | Date | string | null
    phone?: StringNullableFilter<"User"> | string | null
    image?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
    supervisor?: XOR<SuperviserNullableRelationFilter, SuperviserWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    role?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashedRT?: SortOrderInput | SortOrder
    lastLoggedInTime?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    image?: ImageOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    coordinator?: CoordinatorOrderByWithRelationInput
    supervisor?: SuperviserOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    hashedPassword?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    hashedRT?: StringNullableFilter<"User"> | string | null
    lastLoggedInTime?: DateTimeNullableFilter<"User"> | Date | string | null
    phone?: StringNullableFilter<"User"> | string | null
    image?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
    supervisor?: XOR<SuperviserNullableRelationFilter, SuperviserWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    role?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashedRT?: SortOrderInput | SortOrder
    lastLoggedInTime?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    hashedRT?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLoggedInTime?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: IntFilter<"Student"> | number
    userId?: IntFilter<"Student"> | number
    departmentId?: IntFilter<"Student"> | number
    email?: StringFilter<"Student"> | string
    studentNumber?: IntFilter<"Student"> | number
    cassessmentId?: IntFilter<"Student"> | number
    sassessmentId?: IntFilter<"Student"> | number
    applications?: ApplicationListRelationFilter
    cassessment?: XOR<CoordinatorAssessmentNullableRelationFilter, CoordinatorAssessmentWhereInput> | null
    sassessment?: XOR<SuperviserAssessmentNullableRelationFilter, SuperviserAssessmentWhereInput> | null
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    email?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
    applications?: ApplicationOrderByRelationAggregateInput
    cassessment?: CoordinatorAssessmentOrderByWithRelationInput
    sassessment?: SuperviserAssessmentOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    departmentId?: number
    email?: string
    cassessmentId?: number
    sassessmentId?: number
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    studentNumber?: IntFilter<"Student"> | number
    applications?: ApplicationListRelationFilter
    cassessment?: XOR<CoordinatorAssessmentNullableRelationFilter, CoordinatorAssessmentWhereInput> | null
    sassessment?: XOR<SuperviserAssessmentNullableRelationFilter, SuperviserAssessmentWhereInput> | null
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId" | "departmentId" | "email" | "cassessmentId" | "sassessmentId">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    email?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Student"> | number
    userId?: IntWithAggregatesFilter<"Student"> | number
    departmentId?: IntWithAggregatesFilter<"Student"> | number
    email?: StringWithAggregatesFilter<"Student"> | string
    studentNumber?: IntWithAggregatesFilter<"Student"> | number
    cassessmentId?: IntWithAggregatesFilter<"Student"> | number
    sassessmentId?: IntWithAggregatesFilter<"Student"> | number
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: EnumDepartmentNamesFilter<"Department"> | $Enums.DepartmentNames
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
    students?: StudentListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    coordinator?: CoordinatorOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: EnumDepartmentNamesFilter<"Department"> | $Enums.DepartmentNames
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    coordinator?: XOR<CoordinatorNullableRelationFilter, CoordinatorWhereInput> | null
    students?: StudentListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: EnumDepartmentNamesWithAggregatesFilter<"Department"> | $Enums.DepartmentNames
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type SuperviserWhereInput = {
    AND?: SuperviserWhereInput | SuperviserWhereInput[]
    OR?: SuperviserWhereInput[]
    NOT?: SuperviserWhereInput | SuperviserWhereInput[]
    id?: IntFilter<"Superviser"> | number
    userId?: IntFilter<"Superviser"> | number
    email?: StringFilter<"Superviser"> | string
    position?: StringFilter<"Superviser"> | string
    companyId?: IntFilter<"Superviser"> | number
    coordinatorId?: IntFilter<"Superviser"> | number
    assessment?: XOR<SuperviserAssessmentNullableRelationFilter, SuperviserAssessmentWhereInput> | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    coordinator?: XOR<CoordinatorRelationFilter, CoordinatorWhereInput>
  }

  export type SuperviserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    position?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
    assessment?: SuperviserAssessmentOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    coordinator?: CoordinatorOrderByWithRelationInput
  }

  export type SuperviserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    email?: string
    AND?: SuperviserWhereInput | SuperviserWhereInput[]
    OR?: SuperviserWhereInput[]
    NOT?: SuperviserWhereInput | SuperviserWhereInput[]
    position?: StringFilter<"Superviser"> | string
    companyId?: IntFilter<"Superviser"> | number
    coordinatorId?: IntFilter<"Superviser"> | number
    assessment?: XOR<SuperviserAssessmentNullableRelationFilter, SuperviserAssessmentWhereInput> | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    coordinator?: XOR<CoordinatorRelationFilter, CoordinatorWhereInput>
  }, "id" | "userId" | "email">

  export type SuperviserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    position?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
    _count?: SuperviserCountOrderByAggregateInput
    _avg?: SuperviserAvgOrderByAggregateInput
    _max?: SuperviserMaxOrderByAggregateInput
    _min?: SuperviserMinOrderByAggregateInput
    _sum?: SuperviserSumOrderByAggregateInput
  }

  export type SuperviserScalarWhereWithAggregatesInput = {
    AND?: SuperviserScalarWhereWithAggregatesInput | SuperviserScalarWhereWithAggregatesInput[]
    OR?: SuperviserScalarWhereWithAggregatesInput[]
    NOT?: SuperviserScalarWhereWithAggregatesInput | SuperviserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Superviser"> | number
    userId?: IntWithAggregatesFilter<"Superviser"> | number
    email?: StringWithAggregatesFilter<"Superviser"> | string
    position?: StringWithAggregatesFilter<"Superviser"> | string
    companyId?: IntWithAggregatesFilter<"Superviser"> | number
    coordinatorId?: IntWithAggregatesFilter<"Superviser"> | number
  }

  export type CoordinatorWhereInput = {
    AND?: CoordinatorWhereInput | CoordinatorWhereInput[]
    OR?: CoordinatorWhereInput[]
    NOT?: CoordinatorWhereInput | CoordinatorWhereInput[]
    id?: IntFilter<"Coordinator"> | number
    userId?: IntFilter<"Coordinator"> | number
    email?: StringFilter<"Coordinator"> | string
    departmentId?: IntNullableFilter<"Coordinator"> | number | null
    assessment?: XOR<CoordinatorAssessmentNullableRelationFilter, CoordinatorAssessmentWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    supervisers?: SuperviserListRelationFilter
  }

  export type CoordinatorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    assessment?: CoordinatorAssessmentOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    supervisers?: SuperviserOrderByRelationAggregateInput
  }

  export type CoordinatorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    email?: string
    departmentId?: number
    AND?: CoordinatorWhereInput | CoordinatorWhereInput[]
    OR?: CoordinatorWhereInput[]
    NOT?: CoordinatorWhereInput | CoordinatorWhereInput[]
    assessment?: XOR<CoordinatorAssessmentNullableRelationFilter, CoordinatorAssessmentWhereInput> | null
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    supervisers?: SuperviserListRelationFilter
  }, "id" | "userId" | "email" | "departmentId">

  export type CoordinatorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: CoordinatorCountOrderByAggregateInput
    _avg?: CoordinatorAvgOrderByAggregateInput
    _max?: CoordinatorMaxOrderByAggregateInput
    _min?: CoordinatorMinOrderByAggregateInput
    _sum?: CoordinatorSumOrderByAggregateInput
  }

  export type CoordinatorScalarWhereWithAggregatesInput = {
    AND?: CoordinatorScalarWhereWithAggregatesInput | CoordinatorScalarWhereWithAggregatesInput[]
    OR?: CoordinatorScalarWhereWithAggregatesInput[]
    NOT?: CoordinatorScalarWhereWithAggregatesInput | CoordinatorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coordinator"> | number
    userId?: IntWithAggregatesFilter<"Coordinator"> | number
    email?: StringWithAggregatesFilter<"Coordinator"> | string
    departmentId?: IntNullableWithAggregatesFilter<"Coordinator"> | number | null
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: IntFilter<"Application"> | number
    studentId?: IntFilter<"Application"> | number
    resumeId?: IntFilter<"Application"> | number
    name?: StringFilter<"Application"> | string
    days?: IntFilter<"Application"> | number
    email?: StringFilter<"Application"> | string
    cyprus?: BoolNullableFilter<"Application"> | boolean | null
    isApproved?: BoolFilter<"Application"> | boolean
    insurance?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    days?: SortOrder
    email?: SortOrder
    cyprus?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    insurance?: ImageOrderByWithRelationInput
    resume?: ResumeOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentId?: number
    resumeId?: number
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    name?: StringFilter<"Application"> | string
    days?: IntFilter<"Application"> | number
    email?: StringFilter<"Application"> | string
    cyprus?: BoolNullableFilter<"Application"> | boolean | null
    isApproved?: BoolFilter<"Application"> | boolean
    insurance?: XOR<ImageNullableRelationFilter, ImageWhereInput> | null
    resume?: XOR<ResumeRelationFilter, ResumeWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id" | "studentId" | "resumeId">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    days?: SortOrder
    email?: SortOrder
    cyprus?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Application"> | number
    studentId?: IntWithAggregatesFilter<"Application"> | number
    resumeId?: IntWithAggregatesFilter<"Application"> | number
    name?: StringWithAggregatesFilter<"Application"> | string
    days?: IntWithAggregatesFilter<"Application"> | number
    email?: StringWithAggregatesFilter<"Application"> | string
    cyprus?: BoolNullableWithAggregatesFilter<"Application"> | boolean | null
    isApproved?: BoolWithAggregatesFilter<"Application"> | boolean
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    workingFields?: EnumWorkingFieldsNullableListFilter<"Company">
    postalAddr?: IntFilter<"Company"> | number
    fax?: IntNullableFilter<"Company"> | number | null
    telephoneNumber?: StringFilter<"Company"> | string
    email?: StringFilter<"Company"> | string
    webAddr?: StringFilter<"Company"> | string
    description?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    superviser?: SuperviserListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    workingFields?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrderInput | SortOrder
    telephoneNumber?: SortOrder
    email?: SortOrder
    webAddr?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    superviser?: SuperviserOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    workingFields?: EnumWorkingFieldsNullableListFilter<"Company">
    postalAddr?: IntFilter<"Company"> | number
    fax?: IntNullableFilter<"Company"> | number | null
    telephoneNumber?: StringFilter<"Company"> | string
    email?: StringFilter<"Company"> | string
    webAddr?: StringFilter<"Company"> | string
    description?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    superviser?: SuperviserListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    workingFields?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrderInput | SortOrder
    telephoneNumber?: SortOrder
    email?: SortOrder
    webAddr?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    workingFields?: EnumWorkingFieldsNullableListFilter<"Company">
    postalAddr?: IntWithAggregatesFilter<"Company"> | number
    fax?: IntNullableWithAggregatesFilter<"Company"> | number | null
    telephoneNumber?: StringWithAggregatesFilter<"Company"> | string
    email?: StringWithAggregatesFilter<"Company"> | string
    webAddr?: StringWithAggregatesFilter<"Company"> | string
    description?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: IntFilter<"Verification"> | number
    email?: StringFilter<"Verification"> | string
    try?: IntFilter<"Verification"> | number
    code?: StringFilter<"Verification"> | string
    lastResendTime?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    try?: SortOrder
    code?: SortOrder
    lastResendTime?: SortOrder
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    try?: IntFilter<"Verification"> | number
    code?: StringFilter<"Verification"> | string
    lastResendTime?: DateTimeFilter<"Verification"> | Date | string
  }, "id" | "email">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    try?: SortOrder
    code?: SortOrder
    lastResendTime?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _avg?: VerificationAvgOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
    _sum?: VerificationSumOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Verification"> | number
    email?: StringWithAggregatesFilter<"Verification"> | string
    try?: IntWithAggregatesFilter<"Verification"> | number
    code?: StringWithAggregatesFilter<"Verification"> | string
    lastResendTime?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: IntFilter<"Image"> | number
    name?: StringFilter<"Image"> | string
    userId?: IntFilter<"Image"> | number
    applicationId?: IntFilter<"Image"> | number
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    isVerified?: BoolFilter<"Image"> | boolean
    size?: IntFilter<"Image"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    size?: SortOrder
    user?: UserOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    applicationId?: number
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    name?: StringFilter<"Image"> | string
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
    isVerified?: BoolFilter<"Image"> | boolean
    size?: IntFilter<"Image"> | number
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }, "id" | "userId" | "applicationId">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    size?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Image"> | number
    name?: StringWithAggregatesFilter<"Image"> | string
    userId?: IntWithAggregatesFilter<"Image"> | number
    applicationId?: IntWithAggregatesFilter<"Image"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    isVerified?: BoolWithAggregatesFilter<"Image"> | boolean
    size?: IntWithAggregatesFilter<"Image"> | number
  }

  export type ResumeWhereInput = {
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    id?: IntFilter<"Resume"> | number
    name?: StringFilter<"Resume"> | string
    isVerified?: BoolFilter<"Resume"> | boolean
    createdAt?: DateTimeFilter<"Resume"> | Date | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    size?: IntFilter<"Resume"> | number
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }

  export type ResumeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    size?: SortOrder
    application?: ApplicationOrderByWithRelationInput
  }

  export type ResumeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ResumeWhereInput | ResumeWhereInput[]
    OR?: ResumeWhereInput[]
    NOT?: ResumeWhereInput | ResumeWhereInput[]
    name?: StringFilter<"Resume"> | string
    isVerified?: BoolFilter<"Resume"> | boolean
    createdAt?: DateTimeFilter<"Resume"> | Date | string
    updatedAt?: DateTimeFilter<"Resume"> | Date | string
    size?: IntFilter<"Resume"> | number
    application?: XOR<ApplicationNullableRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type ResumeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    size?: SortOrder
    _count?: ResumeCountOrderByAggregateInput
    _avg?: ResumeAvgOrderByAggregateInput
    _max?: ResumeMaxOrderByAggregateInput
    _min?: ResumeMinOrderByAggregateInput
    _sum?: ResumeSumOrderByAggregateInput
  }

  export type ResumeScalarWhereWithAggregatesInput = {
    AND?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    OR?: ResumeScalarWhereWithAggregatesInput[]
    NOT?: ResumeScalarWhereWithAggregatesInput | ResumeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Resume"> | number
    name?: StringWithAggregatesFilter<"Resume"> | string
    isVerified?: BoolWithAggregatesFilter<"Resume"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Resume"> | Date | string
    size?: IntWithAggregatesFilter<"Resume"> | number
  }

  export type CoordinatorAssessmentCreateInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentCreateNestedOneWithoutCassessmentInput
    coordinator?: CoordinatorCreateNestedOneWithoutAssessmentInput
  }

  export type CoordinatorAssessmentUncheckedCreateInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    coordinatorId: number
    student?: StudentUncheckedCreateNestedOneWithoutCassessmentInput
  }

  export type CoordinatorAssessmentUpdateInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneWithoutCassessmentNestedInput
    coordinator?: CoordinatorUpdateOneWithoutAssessmentNestedInput
  }

  export type CoordinatorAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
    student?: StudentUncheckedUpdateOneWithoutCassessmentNestedInput
  }

  export type CoordinatorAssessmentCreateManyInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    coordinatorId: number
  }

  export type CoordinatorAssessmentUpdateManyMutationInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type CoordinatorAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserAssessmentCreateInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentCreateNestedOneWithoutSassessmentInput
    superviser?: SuperviserCreateNestedOneWithoutAssessmentInput
  }

  export type SuperviserAssessmentUncheckedCreateInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    superviserId: number
    student?: StudentUncheckedCreateNestedOneWithoutSassessmentInput
  }

  export type SuperviserAssessmentUpdateInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneWithoutSassessmentNestedInput
    superviser?: SuperviserUpdateOneWithoutAssessmentNestedInput
  }

  export type SuperviserAssessmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    superviserId?: IntFieldUpdateOperationsInput | number
    student?: StudentUncheckedUpdateOneWithoutSassessmentNestedInput
  }

  export type SuperviserAssessmentCreateManyInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    superviserId: number
  }

  export type SuperviserAssessmentUpdateManyMutationInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserAssessmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    superviserId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorCreateNestedOneWithoutUserInput
    supervisor?: SuperviserCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutUserInput
    supervisor?: SuperviserUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUncheckedUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
  }

  export type UserUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateInput = {
    email: string
    studentNumber: number
    applications?: ApplicationCreateNestedManyWithoutStudentInput
    cassessment?: CoordinatorAssessmentCreateNestedOneWithoutStudentInput
    sassessment?: SuperviserAssessmentCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
    user: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUpdateManyWithoutStudentNestedInput
    cassessment?: CoordinatorAssessmentUpdateOneWithoutStudentNestedInput
    sassessment?: SuperviserAssessmentUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
  }

  export type StudentUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateInput = {
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    coordinator?: CoordinatorCreateNestedOneWithoutDepartmentInput
    students?: StudentCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutDepartmentInput
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coordinator?: CoordinatorUpdateOneWithoutDepartmentNestedInput
    students?: StudentUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coordinator?: CoordinatorUncheckedUpdateOneWithoutDepartmentNestedInput
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SuperviserCreateInput = {
    email: string
    position: string
    assessment?: SuperviserAssessmentCreateNestedOneWithoutSuperviserInput
    company: CompanyCreateNestedOneWithoutSuperviserInput
    user: UserCreateNestedOneWithoutSupervisorInput
    coordinator: CoordinatorCreateNestedOneWithoutSupervisersInput
  }

  export type SuperviserUncheckedCreateInput = {
    id?: number
    userId: number
    email: string
    position: string
    companyId: number
    coordinatorId: number
    assessment?: SuperviserAssessmentUncheckedCreateNestedOneWithoutSuperviserInput
  }

  export type SuperviserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    assessment?: SuperviserAssessmentUpdateOneWithoutSuperviserNestedInput
    company?: CompanyUpdateOneRequiredWithoutSuperviserNestedInput
    user?: UserUpdateOneRequiredWithoutSupervisorNestedInput
    coordinator?: CoordinatorUpdateOneRequiredWithoutSupervisersNestedInput
  }

  export type SuperviserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
    assessment?: SuperviserAssessmentUncheckedUpdateOneWithoutSuperviserNestedInput
  }

  export type SuperviserCreateManyInput = {
    id?: number
    userId: number
    email: string
    position: string
    companyId: number
    coordinatorId: number
  }

  export type SuperviserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
  }

  export type SuperviserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
  }

  export type CoordinatorCreateInput = {
    email: string
    assessment?: CoordinatorAssessmentCreateNestedOneWithoutCoordinatorInput
    department?: DepartmentCreateNestedOneWithoutCoordinatorInput
    user: UserCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorUncheckedCreateInput = {
    id?: number
    userId: number
    email: string
    departmentId?: number | null
    assessment?: CoordinatorAssessmentUncheckedCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserUncheckedCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    assessment?: CoordinatorAssessmentUpdateOneWithoutCoordinatorNestedInput
    department?: DepartmentUpdateOneWithoutCoordinatorNestedInput
    user?: UserUpdateOneRequiredWithoutCoordinatorNestedInput
    supervisers?: SuperviserUpdateManyWithoutCoordinatorNestedInput
  }

  export type CoordinatorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    assessment?: CoordinatorAssessmentUncheckedUpdateOneWithoutCoordinatorNestedInput
    supervisers?: SuperviserUncheckedUpdateManyWithoutCoordinatorNestedInput
  }

  export type CoordinatorCreateManyInput = {
    id?: number
    userId: number
    email: string
    departmentId?: number | null
  }

  export type CoordinatorUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type CoordinatorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApplicationCreateInput = {
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageCreateNestedOneWithoutApplicationInput
    resume: ResumeCreateNestedOneWithoutApplicationInput
    student: StudentCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    studentId: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageUncheckedCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUpdateOneWithoutApplicationNestedInput
    resume?: ResumeUpdateOneRequiredWithoutApplicationNestedInput
    student?: StudentUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUncheckedUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    studentId: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
  }

  export type ApplicationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompanyCreateInput = {
    workingFields?: CompanyCreateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr: number
    fax?: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    superviser?: SuperviserCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    workingFields?: CompanyCreateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr: number
    fax?: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    superviser?: SuperviserUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    superviser?: SuperviserUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    superviser?: SuperviserUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    workingFields?: CompanyCreateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr: number
    fax?: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    email: string
    try?: number
    code: string
    lastResendTime: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id?: number
    email: string
    try?: number
    code: string
    lastResendTime: Date | string
  }

  export type VerificationUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    try?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lastResendTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    try?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lastResendTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id?: number
    email: string
    try?: number
    code: string
    lastResendTime: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    try?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lastResendTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    try?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    lastResendTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateInput = {
    name: string
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
    user?: UserCreateNestedOneWithoutImageInput
    application?: ApplicationCreateNestedOneWithoutInsuranceInput
  }

  export type ImageUncheckedCreateInput = {
    id?: number
    name: string
    userId: number
    applicationId: number
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
  }

  export type ImageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutImageNestedInput
    application?: ApplicationUpdateOneWithoutInsuranceNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateManyInput = {
    id?: number
    name: string
    userId: number
    applicationId: number
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
  }

  export type ImageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeCreateInput = {
    name: string
    isVerified?: boolean
    createdAt: Date | string
    updatedAt: Date | string
    size?: number
    application?: ApplicationCreateNestedOneWithoutResumeInput
  }

  export type ResumeUncheckedCreateInput = {
    id?: number
    name: string
    isVerified?: boolean
    createdAt: Date | string
    updatedAt: Date | string
    size?: number
    application?: ApplicationUncheckedCreateNestedOneWithoutResumeInput
  }

  export type ResumeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
    application?: ApplicationUpdateOneWithoutResumeNestedInput
  }

  export type ResumeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
    application?: ApplicationUncheckedUpdateOneWithoutResumeNestedInput
  }

  export type ResumeCreateManyInput = {
    id?: number
    name: string
    isVerified?: boolean
    createdAt: Date | string
    updatedAt: Date | string
    size?: number
  }

  export type ResumeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumScoresFilter<$PrismaModel = never> = {
    equals?: $Enums.Scores | EnumScoresFieldRefInput<$PrismaModel>
    in?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    notIn?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    not?: NestedEnumScoresFilter<$PrismaModel> | $Enums.Scores
  }

  export type StudentNullableRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type CoordinatorNullableRelationFilter = {
    is?: CoordinatorWhereInput | null
    isNot?: CoordinatorWhereInput | null
  }

  export type CoordinatorAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type CoordinatorAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type CoordinatorAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type CoordinatorAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type CoordinatorAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumScoresWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Scores | EnumScoresFieldRefInput<$PrismaModel>
    in?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    notIn?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    not?: NestedEnumScoresWithAggregatesFilter<$PrismaModel> | $Enums.Scores
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoresFilter<$PrismaModel>
    _max?: NestedEnumScoresFilter<$PrismaModel>
  }

  export type SuperviserNullableRelationFilter = {
    is?: SuperviserWhereInput | null
    isNot?: SuperviserWhereInput | null
  }

  export type SuperviserAssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
  }

  export type SuperviserAssessmentAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
  }

  export type SuperviserAssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
  }

  export type SuperviserAssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    qualityOfStudentInternshipReport?: SortOrder
    experienceGained?: SortOrder
    presentation?: SortOrder
    visualPresentationAid?: SortOrder
    overalAssessmentResult?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
  }

  export type SuperviserAssessmentSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    superviserId?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ImageNullableRelationFilter = {
    is?: ImageWhereInput | null
    isNot?: ImageWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    role?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashedRT?: SortOrder
    lastLoggedInTime?: SortOrder
    phone?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    role?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashedRT?: SortOrder
    lastLoggedInTime?: SortOrder
    phone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    role?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashedRT?: SortOrder
    lastLoggedInTime?: SortOrder
    phone?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type CoordinatorAssessmentNullableRelationFilter = {
    is?: CoordinatorAssessmentWhereInput | null
    isNot?: CoordinatorAssessmentWhereInput | null
  }

  export type SuperviserAssessmentNullableRelationFilter = {
    is?: SuperviserAssessmentWhereInput | null
    isNot?: SuperviserAssessmentWhereInput | null
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    email?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    email?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    email?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
    studentNumber?: SortOrder
    cassessmentId?: SortOrder
    sassessmentId?: SortOrder
  }

  export type EnumDepartmentNamesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentNames | EnumDepartmentNamesFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentNamesFilter<$PrismaModel> | $Enums.DepartmentNames
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumDepartmentNamesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentNames | EnumDepartmentNamesFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentNamesWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentNames
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentNamesFilter<$PrismaModel>
    _max?: NestedEnumDepartmentNamesFilter<$PrismaModel>
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type CoordinatorRelationFilter = {
    is?: CoordinatorWhereInput
    isNot?: CoordinatorWhereInput
  }

  export type SuperviserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    position?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type SuperviserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type SuperviserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    position?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type SuperviserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    position?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type SuperviserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    coordinatorId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type SuperviserListRelationFilter = {
    every?: SuperviserWhereInput
    some?: SuperviserWhereInput
    none?: SuperviserWhereInput
  }

  export type SuperviserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoordinatorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    departmentId?: SortOrder
  }

  export type CoordinatorAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
  }

  export type CoordinatorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    departmentId?: SortOrder
  }

  export type CoordinatorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    email?: SortOrder
    departmentId?: SortOrder
  }

  export type CoordinatorSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    departmentId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ResumeRelationFilter = {
    is?: ResumeWhereInput
    isNot?: ResumeWhereInput
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    days?: SortOrder
    email?: SortOrder
    cyprus?: SortOrder
    isApproved?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    days?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    days?: SortOrder
    email?: SortOrder
    cyprus?: SortOrder
    isApproved?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    name?: SortOrder
    days?: SortOrder
    email?: SortOrder
    cyprus?: SortOrder
    isApproved?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    resumeId?: SortOrder
    days?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumWorkingFieldsNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkingFields[] | ListEnumWorkingFieldsFieldRefInput<$PrismaModel> | null
    has?: $Enums.WorkingFields | EnumWorkingFieldsFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.WorkingFields[] | ListEnumWorkingFieldsFieldRefInput<$PrismaModel>
    hasSome?: $Enums.WorkingFields[] | ListEnumWorkingFieldsFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    workingFields?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrder
    telephoneNumber?: SortOrder
    email?: SortOrder
    webAddr?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrder
    telephoneNumber?: SortOrder
    email?: SortOrder
    webAddr?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrder
    telephoneNumber?: SortOrder
    email?: SortOrder
    webAddr?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
    postalAddr?: SortOrder
    fax?: SortOrder
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    try?: SortOrder
    code?: SortOrder
    lastResendTime?: SortOrder
  }

  export type VerificationAvgOrderByAggregateInput = {
    id?: SortOrder
    try?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    try?: SortOrder
    code?: SortOrder
    lastResendTime?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    try?: SortOrder
    code?: SortOrder
    lastResendTime?: SortOrder
  }

  export type VerificationSumOrderByAggregateInput = {
    id?: SortOrder
    try?: SortOrder
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ApplicationNullableRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    size?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    size?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    size?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isVerified?: SortOrder
    size?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    applicationId?: SortOrder
    size?: SortOrder
  }

  export type ResumeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    size?: SortOrder
  }

  export type ResumeAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type ResumeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    size?: SortOrder
  }

  export type ResumeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    size?: SortOrder
  }

  export type ResumeSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type StudentCreateNestedOneWithoutCassessmentInput = {
    create?: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCassessmentInput
    connect?: StudentWhereUniqueInput
  }

  export type CoordinatorCreateNestedOneWithoutAssessmentInput = {
    create?: XOR<CoordinatorCreateWithoutAssessmentInput, CoordinatorUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutAssessmentInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutCassessmentInput = {
    create?: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCassessmentInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumScoresFieldUpdateOperationsInput = {
    set?: $Enums.Scores
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentUpdateOneWithoutCassessmentNestedInput = {
    create?: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCassessmentInput
    upsert?: StudentUpsertWithoutCassessmentInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCassessmentInput, StudentUpdateWithoutCassessmentInput>, StudentUncheckedUpdateWithoutCassessmentInput>
  }

  export type CoordinatorUpdateOneWithoutAssessmentNestedInput = {
    create?: XOR<CoordinatorCreateWithoutAssessmentInput, CoordinatorUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutAssessmentInput
    upsert?: CoordinatorUpsertWithoutAssessmentInput
    disconnect?: CoordinatorWhereInput | boolean
    delete?: CoordinatorWhereInput | boolean
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutAssessmentInput, CoordinatorUpdateWithoutAssessmentInput>, CoordinatorUncheckedUpdateWithoutAssessmentInput>
  }

  export type StudentUncheckedUpdateOneWithoutCassessmentNestedInput = {
    create?: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutCassessmentInput
    upsert?: StudentUpsertWithoutCassessmentInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutCassessmentInput, StudentUpdateWithoutCassessmentInput>, StudentUncheckedUpdateWithoutCassessmentInput>
  }

  export type StudentCreateNestedOneWithoutSassessmentInput = {
    create?: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSassessmentInput
    connect?: StudentWhereUniqueInput
  }

  export type SuperviserCreateNestedOneWithoutAssessmentInput = {
    create?: XOR<SuperviserCreateWithoutAssessmentInput, SuperviserUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutAssessmentInput
    connect?: SuperviserWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutSassessmentInput = {
    create?: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSassessmentInput
    connect?: StudentWhereUniqueInput
  }

  export type StudentUpdateOneWithoutSassessmentNestedInput = {
    create?: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSassessmentInput
    upsert?: StudentUpsertWithoutSassessmentInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSassessmentInput, StudentUpdateWithoutSassessmentInput>, StudentUncheckedUpdateWithoutSassessmentInput>
  }

  export type SuperviserUpdateOneWithoutAssessmentNestedInput = {
    create?: XOR<SuperviserCreateWithoutAssessmentInput, SuperviserUncheckedCreateWithoutAssessmentInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutAssessmentInput
    upsert?: SuperviserUpsertWithoutAssessmentInput
    disconnect?: SuperviserWhereInput | boolean
    delete?: SuperviserWhereInput | boolean
    connect?: SuperviserWhereUniqueInput
    update?: XOR<XOR<SuperviserUpdateToOneWithWhereWithoutAssessmentInput, SuperviserUpdateWithoutAssessmentInput>, SuperviserUncheckedUpdateWithoutAssessmentInput>
  }

  export type StudentUncheckedUpdateOneWithoutSassessmentNestedInput = {
    create?: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSassessmentInput
    upsert?: StudentUpsertWithoutSassessmentInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSassessmentInput, StudentUpdateWithoutSassessmentInput>, StudentUncheckedUpdateWithoutSassessmentInput>
  }

  export type ImageCreateNestedOneWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    connect?: ImageWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type CoordinatorCreateNestedOneWithoutUserInput = {
    create?: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutUserInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type SuperviserCreateNestedOneWithoutUserInput = {
    create?: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutUserInput
    connect?: SuperviserWhereUniqueInput
  }

  export type ImageUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    connect?: ImageWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type CoordinatorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutUserInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type SuperviserUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutUserInput
    connect?: SuperviserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ImageUpdateOneWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    upsert?: ImageUpsertWithoutUserInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutUserInput, ImageUpdateWithoutUserInput>, ImageUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type CoordinatorUpdateOneWithoutUserNestedInput = {
    create?: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutUserInput
    upsert?: CoordinatorUpsertWithoutUserInput
    disconnect?: CoordinatorWhereInput | boolean
    delete?: CoordinatorWhereInput | boolean
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutUserInput, CoordinatorUpdateWithoutUserInput>, CoordinatorUncheckedUpdateWithoutUserInput>
  }

  export type SuperviserUpdateOneWithoutUserNestedInput = {
    create?: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutUserInput
    upsert?: SuperviserUpsertWithoutUserInput
    disconnect?: SuperviserWhereInput | boolean
    delete?: SuperviserWhereInput | boolean
    connect?: SuperviserWhereUniqueInput
    update?: XOR<XOR<SuperviserUpdateToOneWithWhereWithoutUserInput, SuperviserUpdateWithoutUserInput>, SuperviserUncheckedUpdateWithoutUserInput>
  }

  export type ImageUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    connectOrCreate?: ImageCreateOrConnectWithoutUserInput
    upsert?: ImageUpsertWithoutUserInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutUserInput, ImageUpdateWithoutUserInput>, ImageUncheckedUpdateWithoutUserInput>
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type CoordinatorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutUserInput
    upsert?: CoordinatorUpsertWithoutUserInput
    disconnect?: CoordinatorWhereInput | boolean
    delete?: CoordinatorWhereInput | boolean
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutUserInput, CoordinatorUpdateWithoutUserInput>, CoordinatorUncheckedUpdateWithoutUserInput>
  }

  export type SuperviserUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
    connectOrCreate?: SuperviserCreateOrConnectWithoutUserInput
    upsert?: SuperviserUpsertWithoutUserInput
    disconnect?: SuperviserWhereInput | boolean
    delete?: SuperviserWhereInput | boolean
    connect?: SuperviserWhereUniqueInput
    update?: XOR<XOR<SuperviserUpdateToOneWithWhereWithoutUserInput, SuperviserUpdateWithoutUserInput>, SuperviserUncheckedUpdateWithoutUserInput>
  }

  export type ApplicationCreateNestedManyWithoutStudentInput = {
    create?: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput> | ApplicationCreateWithoutStudentInput[] | ApplicationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutStudentInput | ApplicationCreateOrConnectWithoutStudentInput[]
    createMany?: ApplicationCreateManyStudentInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type CoordinatorAssessmentCreateNestedOneWithoutStudentInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutStudentInput, CoordinatorAssessmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutStudentInput
    connect?: CoordinatorAssessmentWhereUniqueInput
  }

  export type SuperviserAssessmentCreateNestedOneWithoutStudentInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutStudentInput, SuperviserAssessmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutStudentInput
    connect?: SuperviserAssessmentWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutStudentsInput = {
    create?: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput> | ApplicationCreateWithoutStudentInput[] | ApplicationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutStudentInput | ApplicationCreateOrConnectWithoutStudentInput[]
    createMany?: ApplicationCreateManyStudentInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type ApplicationUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput> | ApplicationCreateWithoutStudentInput[] | ApplicationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutStudentInput | ApplicationCreateOrConnectWithoutStudentInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutStudentInput | ApplicationUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ApplicationCreateManyStudentInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutStudentInput | ApplicationUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutStudentInput | ApplicationUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CoordinatorAssessmentUpdateOneWithoutStudentNestedInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutStudentInput, CoordinatorAssessmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutStudentInput
    upsert?: CoordinatorAssessmentUpsertWithoutStudentInput
    disconnect?: CoordinatorAssessmentWhereInput | boolean
    delete?: CoordinatorAssessmentWhereInput | boolean
    connect?: CoordinatorAssessmentWhereUniqueInput
    update?: XOR<XOR<CoordinatorAssessmentUpdateToOneWithWhereWithoutStudentInput, CoordinatorAssessmentUpdateWithoutStudentInput>, CoordinatorAssessmentUncheckedUpdateWithoutStudentInput>
  }

  export type SuperviserAssessmentUpdateOneWithoutStudentNestedInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutStudentInput, SuperviserAssessmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutStudentInput
    upsert?: SuperviserAssessmentUpsertWithoutStudentInput
    disconnect?: SuperviserAssessmentWhereInput | boolean
    delete?: SuperviserAssessmentWhereInput | boolean
    connect?: SuperviserAssessmentWhereUniqueInput
    update?: XOR<XOR<SuperviserAssessmentUpdateToOneWithWhereWithoutStudentInput, SuperviserAssessmentUpdateWithoutStudentInput>, SuperviserAssessmentUncheckedUpdateWithoutStudentInput>
  }

  export type DepartmentUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutStudentsInput
    upsert?: DepartmentUpsertWithoutStudentsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutStudentsInput, DepartmentUpdateWithoutStudentsInput>, DepartmentUncheckedUpdateWithoutStudentsInput>
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput> | ApplicationCreateWithoutStudentInput[] | ApplicationUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutStudentInput | ApplicationCreateOrConnectWithoutStudentInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutStudentInput | ApplicationUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ApplicationCreateManyStudentInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutStudentInput | ApplicationUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutStudentInput | ApplicationUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CoordinatorCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutDepartmentInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type CoordinatorUncheckedCreateNestedOneWithoutDepartmentInput = {
    create?: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutDepartmentInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type EnumDepartmentNamesFieldUpdateOperationsInput = {
    set?: $Enums.DepartmentNames
  }

  export type CoordinatorUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutDepartmentInput
    upsert?: CoordinatorUpsertWithoutDepartmentInput
    disconnect?: CoordinatorWhereInput | boolean
    delete?: CoordinatorWhereInput | boolean
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutDepartmentInput, CoordinatorUpdateWithoutDepartmentInput>, CoordinatorUncheckedUpdateWithoutDepartmentInput>
  }

  export type StudentUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type CoordinatorUncheckedUpdateOneWithoutDepartmentNestedInput = {
    create?: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutDepartmentInput
    upsert?: CoordinatorUpsertWithoutDepartmentInput
    disconnect?: CoordinatorWhereInput | boolean
    delete?: CoordinatorWhereInput | boolean
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutDepartmentInput, CoordinatorUpdateWithoutDepartmentInput>, CoordinatorUncheckedUpdateWithoutDepartmentInput>
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput> | StudentCreateWithoutDepartmentInput[] | StudentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutDepartmentInput | StudentCreateOrConnectWithoutDepartmentInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutDepartmentInput | StudentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: StudentCreateManyDepartmentInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutDepartmentInput | StudentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutDepartmentInput | StudentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type SuperviserAssessmentCreateNestedOneWithoutSuperviserInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutSuperviserInput
    connect?: SuperviserAssessmentWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutSuperviserInput = {
    create?: XOR<CompanyCreateWithoutSuperviserInput, CompanyUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSuperviserInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSupervisorInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput
    connect?: UserWhereUniqueInput
  }

  export type CoordinatorCreateNestedOneWithoutSupervisersInput = {
    create?: XOR<CoordinatorCreateWithoutSupervisersInput, CoordinatorUncheckedCreateWithoutSupervisersInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutSupervisersInput
    connect?: CoordinatorWhereUniqueInput
  }

  export type SuperviserAssessmentUncheckedCreateNestedOneWithoutSuperviserInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutSuperviserInput
    connect?: SuperviserAssessmentWhereUniqueInput
  }

  export type SuperviserAssessmentUpdateOneWithoutSuperviserNestedInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutSuperviserInput
    upsert?: SuperviserAssessmentUpsertWithoutSuperviserInput
    disconnect?: SuperviserAssessmentWhereInput | boolean
    delete?: SuperviserAssessmentWhereInput | boolean
    connect?: SuperviserAssessmentWhereUniqueInput
    update?: XOR<XOR<SuperviserAssessmentUpdateToOneWithWhereWithoutSuperviserInput, SuperviserAssessmentUpdateWithoutSuperviserInput>, SuperviserAssessmentUncheckedUpdateWithoutSuperviserInput>
  }

  export type CompanyUpdateOneRequiredWithoutSuperviserNestedInput = {
    create?: XOR<CompanyCreateWithoutSuperviserInput, CompanyUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSuperviserInput
    upsert?: CompanyUpsertWithoutSuperviserInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSuperviserInput, CompanyUpdateWithoutSuperviserInput>, CompanyUncheckedUpdateWithoutSuperviserInput>
  }

  export type UserUpdateOneRequiredWithoutSupervisorNestedInput = {
    create?: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupervisorInput
    upsert?: UserUpsertWithoutSupervisorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSupervisorInput, UserUpdateWithoutSupervisorInput>, UserUncheckedUpdateWithoutSupervisorInput>
  }

  export type CoordinatorUpdateOneRequiredWithoutSupervisersNestedInput = {
    create?: XOR<CoordinatorCreateWithoutSupervisersInput, CoordinatorUncheckedCreateWithoutSupervisersInput>
    connectOrCreate?: CoordinatorCreateOrConnectWithoutSupervisersInput
    upsert?: CoordinatorUpsertWithoutSupervisersInput
    connect?: CoordinatorWhereUniqueInput
    update?: XOR<XOR<CoordinatorUpdateToOneWithWhereWithoutSupervisersInput, CoordinatorUpdateWithoutSupervisersInput>, CoordinatorUncheckedUpdateWithoutSupervisersInput>
  }

  export type SuperviserAssessmentUncheckedUpdateOneWithoutSuperviserNestedInput = {
    create?: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
    connectOrCreate?: SuperviserAssessmentCreateOrConnectWithoutSuperviserInput
    upsert?: SuperviserAssessmentUpsertWithoutSuperviserInput
    disconnect?: SuperviserAssessmentWhereInput | boolean
    delete?: SuperviserAssessmentWhereInput | boolean
    connect?: SuperviserAssessmentWhereUniqueInput
    update?: XOR<XOR<SuperviserAssessmentUpdateToOneWithWhereWithoutSuperviserInput, SuperviserAssessmentUpdateWithoutSuperviserInput>, SuperviserAssessmentUncheckedUpdateWithoutSuperviserInput>
  }

  export type CoordinatorAssessmentCreateNestedOneWithoutCoordinatorInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutCoordinatorInput
    connect?: CoordinatorAssessmentWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutCoordinatorInput = {
    create?: XOR<DepartmentCreateWithoutCoordinatorInput, DepartmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoordinatorInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCoordinatorInput = {
    create?: XOR<UserCreateWithoutCoordinatorInput, UserUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoordinatorInput
    connect?: UserWhereUniqueInput
  }

  export type SuperviserCreateNestedManyWithoutCoordinatorInput = {
    create?: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput> | SuperviserCreateWithoutCoordinatorInput[] | SuperviserUncheckedCreateWithoutCoordinatorInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCoordinatorInput | SuperviserCreateOrConnectWithoutCoordinatorInput[]
    createMany?: SuperviserCreateManyCoordinatorInputEnvelope
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
  }

  export type CoordinatorAssessmentUncheckedCreateNestedOneWithoutCoordinatorInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutCoordinatorInput
    connect?: CoordinatorAssessmentWhereUniqueInput
  }

  export type SuperviserUncheckedCreateNestedManyWithoutCoordinatorInput = {
    create?: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput> | SuperviserCreateWithoutCoordinatorInput[] | SuperviserUncheckedCreateWithoutCoordinatorInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCoordinatorInput | SuperviserCreateOrConnectWithoutCoordinatorInput[]
    createMany?: SuperviserCreateManyCoordinatorInputEnvelope
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
  }

  export type CoordinatorAssessmentUpdateOneWithoutCoordinatorNestedInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutCoordinatorInput
    upsert?: CoordinatorAssessmentUpsertWithoutCoordinatorInput
    disconnect?: CoordinatorAssessmentWhereInput | boolean
    delete?: CoordinatorAssessmentWhereInput | boolean
    connect?: CoordinatorAssessmentWhereUniqueInput
    update?: XOR<XOR<CoordinatorAssessmentUpdateToOneWithWhereWithoutCoordinatorInput, CoordinatorAssessmentUpdateWithoutCoordinatorInput>, CoordinatorAssessmentUncheckedUpdateWithoutCoordinatorInput>
  }

  export type DepartmentUpdateOneWithoutCoordinatorNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoordinatorInput, DepartmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoordinatorInput
    upsert?: DepartmentUpsertWithoutCoordinatorInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoordinatorInput, DepartmentUpdateWithoutCoordinatorInput>, DepartmentUncheckedUpdateWithoutCoordinatorInput>
  }

  export type UserUpdateOneRequiredWithoutCoordinatorNestedInput = {
    create?: XOR<UserCreateWithoutCoordinatorInput, UserUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoordinatorInput
    upsert?: UserUpsertWithoutCoordinatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoordinatorInput, UserUpdateWithoutCoordinatorInput>, UserUncheckedUpdateWithoutCoordinatorInput>
  }

  export type SuperviserUpdateManyWithoutCoordinatorNestedInput = {
    create?: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput> | SuperviserCreateWithoutCoordinatorInput[] | SuperviserUncheckedCreateWithoutCoordinatorInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCoordinatorInput | SuperviserCreateOrConnectWithoutCoordinatorInput[]
    upsert?: SuperviserUpsertWithWhereUniqueWithoutCoordinatorInput | SuperviserUpsertWithWhereUniqueWithoutCoordinatorInput[]
    createMany?: SuperviserCreateManyCoordinatorInputEnvelope
    set?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    disconnect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    delete?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    update?: SuperviserUpdateWithWhereUniqueWithoutCoordinatorInput | SuperviserUpdateWithWhereUniqueWithoutCoordinatorInput[]
    updateMany?: SuperviserUpdateManyWithWhereWithoutCoordinatorInput | SuperviserUpdateManyWithWhereWithoutCoordinatorInput[]
    deleteMany?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CoordinatorAssessmentUncheckedUpdateOneWithoutCoordinatorNestedInput = {
    create?: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
    connectOrCreate?: CoordinatorAssessmentCreateOrConnectWithoutCoordinatorInput
    upsert?: CoordinatorAssessmentUpsertWithoutCoordinatorInput
    disconnect?: CoordinatorAssessmentWhereInput | boolean
    delete?: CoordinatorAssessmentWhereInput | boolean
    connect?: CoordinatorAssessmentWhereUniqueInput
    update?: XOR<XOR<CoordinatorAssessmentUpdateToOneWithWhereWithoutCoordinatorInput, CoordinatorAssessmentUpdateWithoutCoordinatorInput>, CoordinatorAssessmentUncheckedUpdateWithoutCoordinatorInput>
  }

  export type SuperviserUncheckedUpdateManyWithoutCoordinatorNestedInput = {
    create?: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput> | SuperviserCreateWithoutCoordinatorInput[] | SuperviserUncheckedCreateWithoutCoordinatorInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCoordinatorInput | SuperviserCreateOrConnectWithoutCoordinatorInput[]
    upsert?: SuperviserUpsertWithWhereUniqueWithoutCoordinatorInput | SuperviserUpsertWithWhereUniqueWithoutCoordinatorInput[]
    createMany?: SuperviserCreateManyCoordinatorInputEnvelope
    set?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    disconnect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    delete?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    update?: SuperviserUpdateWithWhereUniqueWithoutCoordinatorInput | SuperviserUpdateWithWhereUniqueWithoutCoordinatorInput[]
    updateMany?: SuperviserUpdateManyWithWhereWithoutCoordinatorInput | SuperviserUpdateManyWithWhereWithoutCoordinatorInput[]
    deleteMany?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
  }

  export type ImageCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ImageCreateOrConnectWithoutApplicationInput
    connect?: ImageWhereUniqueInput
  }

  export type ResumeCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ResumeCreateWithoutApplicationInput, ResumeUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutApplicationInput
    connect?: ResumeWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<StudentCreateWithoutApplicationsInput, StudentUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutApplicationsInput
    connect?: StudentWhereUniqueInput
  }

  export type ImageUncheckedCreateNestedOneWithoutApplicationInput = {
    create?: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ImageCreateOrConnectWithoutApplicationInput
    connect?: ImageWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ImageUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ImageCreateOrConnectWithoutApplicationInput
    upsert?: ImageUpsertWithoutApplicationInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutApplicationInput, ImageUpdateWithoutApplicationInput>, ImageUncheckedUpdateWithoutApplicationInput>
  }

  export type ResumeUpdateOneRequiredWithoutApplicationNestedInput = {
    create?: XOR<ResumeCreateWithoutApplicationInput, ResumeUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ResumeCreateOrConnectWithoutApplicationInput
    upsert?: ResumeUpsertWithoutApplicationInput
    connect?: ResumeWhereUniqueInput
    update?: XOR<XOR<ResumeUpdateToOneWithWhereWithoutApplicationInput, ResumeUpdateWithoutApplicationInput>, ResumeUncheckedUpdateWithoutApplicationInput>
  }

  export type StudentUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<StudentCreateWithoutApplicationsInput, StudentUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutApplicationsInput
    upsert?: StudentUpsertWithoutApplicationsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutApplicationsInput, StudentUpdateWithoutApplicationsInput>, StudentUncheckedUpdateWithoutApplicationsInput>
  }

  export type ImageUncheckedUpdateOneWithoutApplicationNestedInput = {
    create?: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
    connectOrCreate?: ImageCreateOrConnectWithoutApplicationInput
    upsert?: ImageUpsertWithoutApplicationInput
    disconnect?: ImageWhereInput | boolean
    delete?: ImageWhereInput | boolean
    connect?: ImageWhereUniqueInput
    update?: XOR<XOR<ImageUpdateToOneWithWhereWithoutApplicationInput, ImageUpdateWithoutApplicationInput>, ImageUncheckedUpdateWithoutApplicationInput>
  }

  export type CompanyCreateworkingFieldsInput = {
    set: $Enums.WorkingFields[]
  }

  export type SuperviserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput> | SuperviserCreateWithoutCompanyInput[] | SuperviserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCompanyInput | SuperviserCreateOrConnectWithoutCompanyInput[]
    createMany?: SuperviserCreateManyCompanyInputEnvelope
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
  }

  export type SuperviserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput> | SuperviserCreateWithoutCompanyInput[] | SuperviserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCompanyInput | SuperviserCreateOrConnectWithoutCompanyInput[]
    createMany?: SuperviserCreateManyCompanyInputEnvelope
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
  }

  export type CompanyUpdateworkingFieldsInput = {
    set?: $Enums.WorkingFields[]
    push?: $Enums.WorkingFields | $Enums.WorkingFields[]
  }

  export type SuperviserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput> | SuperviserCreateWithoutCompanyInput[] | SuperviserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCompanyInput | SuperviserCreateOrConnectWithoutCompanyInput[]
    upsert?: SuperviserUpsertWithWhereUniqueWithoutCompanyInput | SuperviserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SuperviserCreateManyCompanyInputEnvelope
    set?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    disconnect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    delete?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    update?: SuperviserUpdateWithWhereUniqueWithoutCompanyInput | SuperviserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SuperviserUpdateManyWithWhereWithoutCompanyInput | SuperviserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
  }

  export type SuperviserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput> | SuperviserCreateWithoutCompanyInput[] | SuperviserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SuperviserCreateOrConnectWithoutCompanyInput | SuperviserCreateOrConnectWithoutCompanyInput[]
    upsert?: SuperviserUpsertWithWhereUniqueWithoutCompanyInput | SuperviserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SuperviserCreateManyCompanyInputEnvelope
    set?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    disconnect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    delete?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    connect?: SuperviserWhereUniqueInput | SuperviserWhereUniqueInput[]
    update?: SuperviserUpdateWithWhereUniqueWithoutCompanyInput | SuperviserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SuperviserUpdateManyWithWhereWithoutCompanyInput | SuperviserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutImageInput = {
    create?: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    connectOrCreate?: UserCreateOrConnectWithoutImageInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutInsuranceInput = {
    create?: XOR<ApplicationCreateWithoutInsuranceInput, ApplicationUncheckedCreateWithoutInsuranceInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInsuranceInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserUpdateOneWithoutImageNestedInput = {
    create?: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    connectOrCreate?: UserCreateOrConnectWithoutImageInput
    upsert?: UserUpsertWithoutImageInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImageInput, UserUpdateWithoutImageInput>, UserUncheckedUpdateWithoutImageInput>
  }

  export type ApplicationUpdateOneWithoutInsuranceNestedInput = {
    create?: XOR<ApplicationCreateWithoutInsuranceInput, ApplicationUncheckedCreateWithoutInsuranceInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInsuranceInput
    upsert?: ApplicationUpsertWithoutInsuranceInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutInsuranceInput, ApplicationUpdateWithoutInsuranceInput>, ApplicationUncheckedUpdateWithoutInsuranceInput>
  }

  export type ApplicationCreateNestedOneWithoutResumeInput = {
    create?: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutResumeInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedOneWithoutResumeInput = {
    create?: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutResumeInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneWithoutResumeNestedInput = {
    create?: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutResumeInput
    upsert?: ApplicationUpsertWithoutResumeInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutResumeInput, ApplicationUpdateWithoutResumeInput>, ApplicationUncheckedUpdateWithoutResumeInput>
  }

  export type ApplicationUncheckedUpdateOneWithoutResumeNestedInput = {
    create?: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutResumeInput
    upsert?: ApplicationUpsertWithoutResumeInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutResumeInput, ApplicationUpdateWithoutResumeInput>, ApplicationUncheckedUpdateWithoutResumeInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumScoresFilter<$PrismaModel = never> = {
    equals?: $Enums.Scores | EnumScoresFieldRefInput<$PrismaModel>
    in?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    notIn?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    not?: NestedEnumScoresFilter<$PrismaModel> | $Enums.Scores
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumScoresWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Scores | EnumScoresFieldRefInput<$PrismaModel>
    in?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    notIn?: $Enums.Scores[] | ListEnumScoresFieldRefInput<$PrismaModel>
    not?: NestedEnumScoresWithAggregatesFilter<$PrismaModel> | $Enums.Scores
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumScoresFilter<$PrismaModel>
    _max?: NestedEnumScoresFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentNamesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentNames | EnumDepartmentNamesFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentNamesFilter<$PrismaModel> | $Enums.DepartmentNames
  }

  export type NestedEnumDepartmentNamesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentNames | EnumDepartmentNamesFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentNames[] | ListEnumDepartmentNamesFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentNamesWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentNames
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentNamesFilter<$PrismaModel>
    _max?: NestedEnumDepartmentNamesFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StudentCreateWithoutCassessmentInput = {
    email: string
    studentNumber: number
    applications?: ApplicationCreateNestedManyWithoutStudentInput
    sassessment?: SuperviserAssessmentCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
    user: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCassessmentInput = {
    id?: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    sassessmentId: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCassessmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
  }

  export type CoordinatorCreateWithoutAssessmentInput = {
    email: string
    department?: DepartmentCreateNestedOneWithoutCoordinatorInput
    user: UserCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorUncheckedCreateWithoutAssessmentInput = {
    id?: number
    userId: number
    email: string
    departmentId?: number | null
    supervisers?: SuperviserUncheckedCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorCreateOrConnectWithoutAssessmentInput = {
    where: CoordinatorWhereUniqueInput
    create: XOR<CoordinatorCreateWithoutAssessmentInput, CoordinatorUncheckedCreateWithoutAssessmentInput>
  }

  export type StudentUpsertWithoutCassessmentInput = {
    update: XOR<StudentUpdateWithoutCassessmentInput, StudentUncheckedUpdateWithoutCassessmentInput>
    create: XOR<StudentCreateWithoutCassessmentInput, StudentUncheckedCreateWithoutCassessmentInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutCassessmentInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutCassessmentInput, StudentUncheckedUpdateWithoutCassessmentInput>
  }

  export type StudentUpdateWithoutCassessmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUpdateManyWithoutStudentNestedInput
    sassessment?: SuperviserAssessmentUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCassessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CoordinatorUpsertWithoutAssessmentInput = {
    update: XOR<CoordinatorUpdateWithoutAssessmentInput, CoordinatorUncheckedUpdateWithoutAssessmentInput>
    create: XOR<CoordinatorCreateWithoutAssessmentInput, CoordinatorUncheckedCreateWithoutAssessmentInput>
    where?: CoordinatorWhereInput
  }

  export type CoordinatorUpdateToOneWithWhereWithoutAssessmentInput = {
    where?: CoordinatorWhereInput
    data: XOR<CoordinatorUpdateWithoutAssessmentInput, CoordinatorUncheckedUpdateWithoutAssessmentInput>
  }

  export type CoordinatorUpdateWithoutAssessmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    department?: DepartmentUpdateOneWithoutCoordinatorNestedInput
    user?: UserUpdateOneRequiredWithoutCoordinatorNestedInput
    supervisers?: SuperviserUpdateManyWithoutCoordinatorNestedInput
  }

  export type CoordinatorUncheckedUpdateWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    supervisers?: SuperviserUncheckedUpdateManyWithoutCoordinatorNestedInput
  }

  export type StudentCreateWithoutSassessmentInput = {
    email: string
    studentNumber: number
    applications?: ApplicationCreateNestedManyWithoutStudentInput
    cassessment?: CoordinatorAssessmentCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
    user: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutSassessmentInput = {
    id?: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSassessmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
  }

  export type SuperviserCreateWithoutAssessmentInput = {
    email: string
    position: string
    company: CompanyCreateNestedOneWithoutSuperviserInput
    user: UserCreateNestedOneWithoutSupervisorInput
    coordinator: CoordinatorCreateNestedOneWithoutSupervisersInput
  }

  export type SuperviserUncheckedCreateWithoutAssessmentInput = {
    id?: number
    userId: number
    email: string
    position: string
    companyId: number
    coordinatorId: number
  }

  export type SuperviserCreateOrConnectWithoutAssessmentInput = {
    where: SuperviserWhereUniqueInput
    create: XOR<SuperviserCreateWithoutAssessmentInput, SuperviserUncheckedCreateWithoutAssessmentInput>
  }

  export type StudentUpsertWithoutSassessmentInput = {
    update: XOR<StudentUpdateWithoutSassessmentInput, StudentUncheckedUpdateWithoutSassessmentInput>
    create: XOR<StudentCreateWithoutSassessmentInput, StudentUncheckedCreateWithoutSassessmentInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSassessmentInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSassessmentInput, StudentUncheckedUpdateWithoutSassessmentInput>
  }

  export type StudentUpdateWithoutSassessmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUpdateManyWithoutStudentNestedInput
    cassessment?: CoordinatorAssessmentUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutSassessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type SuperviserUpsertWithoutAssessmentInput = {
    update: XOR<SuperviserUpdateWithoutAssessmentInput, SuperviserUncheckedUpdateWithoutAssessmentInput>
    create: XOR<SuperviserCreateWithoutAssessmentInput, SuperviserUncheckedCreateWithoutAssessmentInput>
    where?: SuperviserWhereInput
  }

  export type SuperviserUpdateToOneWithWhereWithoutAssessmentInput = {
    where?: SuperviserWhereInput
    data: XOR<SuperviserUpdateWithoutAssessmentInput, SuperviserUncheckedUpdateWithoutAssessmentInput>
  }

  export type SuperviserUpdateWithoutAssessmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    company?: CompanyUpdateOneRequiredWithoutSuperviserNestedInput
    user?: UserUpdateOneRequiredWithoutSupervisorNestedInput
    coordinator?: CoordinatorUpdateOneRequiredWithoutSupervisersNestedInput
  }

  export type SuperviserUncheckedUpdateWithoutAssessmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateWithoutUserInput = {
    name: string
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
    application?: ApplicationCreateNestedOneWithoutInsuranceInput
  }

  export type ImageUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    applicationId: number
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
  }

  export type ImageCreateOrConnectWithoutUserInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateWithoutUserInput = {
    email: string
    studentNumber: number
    applications?: ApplicationCreateNestedManyWithoutStudentInput
    cassessment?: CoordinatorAssessmentCreateNestedOneWithoutStudentInput
    sassessment?: SuperviserAssessmentCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type CoordinatorCreateWithoutUserInput = {
    email: string
    assessment?: CoordinatorAssessmentCreateNestedOneWithoutCoordinatorInput
    department?: DepartmentCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    departmentId?: number | null
    assessment?: CoordinatorAssessmentUncheckedCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserUncheckedCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorCreateOrConnectWithoutUserInput = {
    where: CoordinatorWhereUniqueInput
    create: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
  }

  export type SuperviserCreateWithoutUserInput = {
    email: string
    position: string
    assessment?: SuperviserAssessmentCreateNestedOneWithoutSuperviserInput
    company: CompanyCreateNestedOneWithoutSuperviserInput
    coordinator: CoordinatorCreateNestedOneWithoutSupervisersInput
  }

  export type SuperviserUncheckedCreateWithoutUserInput = {
    id?: number
    email: string
    position: string
    companyId: number
    coordinatorId: number
    assessment?: SuperviserAssessmentUncheckedCreateNestedOneWithoutSuperviserInput
  }

  export type SuperviserCreateOrConnectWithoutUserInput = {
    where: SuperviserWhereUniqueInput
    create: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
  }

  export type ImageUpsertWithoutUserInput = {
    update: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
    create: XOR<ImageCreateWithoutUserInput, ImageUncheckedCreateWithoutUserInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutUserInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutUserInput, ImageUncheckedUpdateWithoutUserInput>
  }

  export type ImageUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
    application?: ApplicationUpdateOneWithoutInsuranceNestedInput
  }

  export type ImageUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    applicationId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUpdateManyWithoutStudentNestedInput
    cassessment?: CoordinatorAssessmentUpdateOneWithoutStudentNestedInput
    sassessment?: SuperviserAssessmentUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CoordinatorUpsertWithoutUserInput = {
    update: XOR<CoordinatorUpdateWithoutUserInput, CoordinatorUncheckedUpdateWithoutUserInput>
    create: XOR<CoordinatorCreateWithoutUserInput, CoordinatorUncheckedCreateWithoutUserInput>
    where?: CoordinatorWhereInput
  }

  export type CoordinatorUpdateToOneWithWhereWithoutUserInput = {
    where?: CoordinatorWhereInput
    data: XOR<CoordinatorUpdateWithoutUserInput, CoordinatorUncheckedUpdateWithoutUserInput>
  }

  export type CoordinatorUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    assessment?: CoordinatorAssessmentUpdateOneWithoutCoordinatorNestedInput
    department?: DepartmentUpdateOneWithoutCoordinatorNestedInput
    supervisers?: SuperviserUpdateManyWithoutCoordinatorNestedInput
  }

  export type CoordinatorUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    assessment?: CoordinatorAssessmentUncheckedUpdateOneWithoutCoordinatorNestedInput
    supervisers?: SuperviserUncheckedUpdateManyWithoutCoordinatorNestedInput
  }

  export type SuperviserUpsertWithoutUserInput = {
    update: XOR<SuperviserUpdateWithoutUserInput, SuperviserUncheckedUpdateWithoutUserInput>
    create: XOR<SuperviserCreateWithoutUserInput, SuperviserUncheckedCreateWithoutUserInput>
    where?: SuperviserWhereInput
  }

  export type SuperviserUpdateToOneWithWhereWithoutUserInput = {
    where?: SuperviserWhereInput
    data: XOR<SuperviserUpdateWithoutUserInput, SuperviserUncheckedUpdateWithoutUserInput>
  }

  export type SuperviserUpdateWithoutUserInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    assessment?: SuperviserAssessmentUpdateOneWithoutSuperviserNestedInput
    company?: CompanyUpdateOneRequiredWithoutSuperviserNestedInput
    coordinator?: CoordinatorUpdateOneRequiredWithoutSupervisersNestedInput
  }

  export type SuperviserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
    assessment?: SuperviserAssessmentUncheckedUpdateOneWithoutSuperviserNestedInput
  }

  export type ApplicationCreateWithoutStudentInput = {
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageCreateNestedOneWithoutApplicationInput
    resume: ResumeCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutStudentInput = {
    id?: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageUncheckedCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutStudentInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput>
  }

  export type ApplicationCreateManyStudentInputEnvelope = {
    data: ApplicationCreateManyStudentInput | ApplicationCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CoordinatorAssessmentCreateWithoutStudentInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    coordinator?: CoordinatorCreateNestedOneWithoutAssessmentInput
  }

  export type CoordinatorAssessmentUncheckedCreateWithoutStudentInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    coordinatorId: number
  }

  export type CoordinatorAssessmentCreateOrConnectWithoutStudentInput = {
    where: CoordinatorAssessmentWhereUniqueInput
    create: XOR<CoordinatorAssessmentCreateWithoutStudentInput, CoordinatorAssessmentUncheckedCreateWithoutStudentInput>
  }

  export type SuperviserAssessmentCreateWithoutStudentInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    superviser?: SuperviserCreateNestedOneWithoutAssessmentInput
  }

  export type SuperviserAssessmentUncheckedCreateWithoutStudentInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    superviserId: number
  }

  export type SuperviserAssessmentCreateOrConnectWithoutStudentInput = {
    where: SuperviserAssessmentWhereUniqueInput
    create: XOR<SuperviserAssessmentCreateWithoutStudentInput, SuperviserAssessmentUncheckedCreateWithoutStudentInput>
  }

  export type DepartmentCreateWithoutStudentsInput = {
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    coordinator?: CoordinatorCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutStudentsInput = {
    id?: number
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutStudentsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
  }

  export type UserCreateWithoutStudentInput = {
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorCreateNestedOneWithoutUserInput
    supervisor?: SuperviserCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutUserInput
    supervisor?: SuperviserUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type ApplicationUpsertWithWhereUniqueWithoutStudentInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutStudentInput, ApplicationUncheckedUpdateWithoutStudentInput>
    create: XOR<ApplicationCreateWithoutStudentInput, ApplicationUncheckedCreateWithoutStudentInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutStudentInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutStudentInput, ApplicationUncheckedUpdateWithoutStudentInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutStudentInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutStudentInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: IntFilter<"Application"> | number
    studentId?: IntFilter<"Application"> | number
    resumeId?: IntFilter<"Application"> | number
    name?: StringFilter<"Application"> | string
    days?: IntFilter<"Application"> | number
    email?: StringFilter<"Application"> | string
    cyprus?: BoolNullableFilter<"Application"> | boolean | null
    isApproved?: BoolFilter<"Application"> | boolean
  }

  export type CoordinatorAssessmentUpsertWithoutStudentInput = {
    update: XOR<CoordinatorAssessmentUpdateWithoutStudentInput, CoordinatorAssessmentUncheckedUpdateWithoutStudentInput>
    create: XOR<CoordinatorAssessmentCreateWithoutStudentInput, CoordinatorAssessmentUncheckedCreateWithoutStudentInput>
    where?: CoordinatorAssessmentWhereInput
  }

  export type CoordinatorAssessmentUpdateToOneWithWhereWithoutStudentInput = {
    where?: CoordinatorAssessmentWhereInput
    data: XOR<CoordinatorAssessmentUpdateWithoutStudentInput, CoordinatorAssessmentUncheckedUpdateWithoutStudentInput>
  }

  export type CoordinatorAssessmentUpdateWithoutStudentInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    coordinator?: CoordinatorUpdateOneWithoutAssessmentNestedInput
  }

  export type CoordinatorAssessmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    coordinatorId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserAssessmentUpsertWithoutStudentInput = {
    update: XOR<SuperviserAssessmentUpdateWithoutStudentInput, SuperviserAssessmentUncheckedUpdateWithoutStudentInput>
    create: XOR<SuperviserAssessmentCreateWithoutStudentInput, SuperviserAssessmentUncheckedCreateWithoutStudentInput>
    where?: SuperviserAssessmentWhereInput
  }

  export type SuperviserAssessmentUpdateToOneWithWhereWithoutStudentInput = {
    where?: SuperviserAssessmentWhereInput
    data: XOR<SuperviserAssessmentUpdateWithoutStudentInput, SuperviserAssessmentUncheckedUpdateWithoutStudentInput>
  }

  export type SuperviserAssessmentUpdateWithoutStudentInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    superviser?: SuperviserUpdateOneWithoutAssessmentNestedInput
  }

  export type SuperviserAssessmentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    superviserId?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentUpsertWithoutStudentsInput = {
    update: XOR<DepartmentUpdateWithoutStudentsInput, DepartmentUncheckedUpdateWithoutStudentsInput>
    create: XOR<DepartmentCreateWithoutStudentsInput, DepartmentUncheckedCreateWithoutStudentsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutStudentsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutStudentsInput, DepartmentUncheckedUpdateWithoutStudentsInput>
  }

  export type DepartmentUpdateWithoutStudentsInput = {
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coordinator?: CoordinatorUpdateOneWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    coordinator?: CoordinatorUncheckedUpdateOneWithoutDepartmentNestedInput
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUncheckedUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CoordinatorCreateWithoutDepartmentInput = {
    email: string
    assessment?: CoordinatorAssessmentCreateNestedOneWithoutCoordinatorInput
    user: UserCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorUncheckedCreateWithoutDepartmentInput = {
    id?: number
    userId: number
    email: string
    assessment?: CoordinatorAssessmentUncheckedCreateNestedOneWithoutCoordinatorInput
    supervisers?: SuperviserUncheckedCreateNestedManyWithoutCoordinatorInput
  }

  export type CoordinatorCreateOrConnectWithoutDepartmentInput = {
    where: CoordinatorWhereUniqueInput
    create: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentCreateWithoutDepartmentInput = {
    email: string
    studentNumber: number
    applications?: ApplicationCreateNestedManyWithoutStudentInput
    cassessment?: CoordinatorAssessmentCreateNestedOneWithoutStudentInput
    sassessment?: SuperviserAssessmentCreateNestedOneWithoutStudentInput
    user: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutDepartmentInput = {
    id?: number
    userId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
    applications?: ApplicationUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentCreateManyDepartmentInputEnvelope = {
    data: StudentCreateManyDepartmentInput | StudentCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CoordinatorUpsertWithoutDepartmentInput = {
    update: XOR<CoordinatorUpdateWithoutDepartmentInput, CoordinatorUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CoordinatorCreateWithoutDepartmentInput, CoordinatorUncheckedCreateWithoutDepartmentInput>
    where?: CoordinatorWhereInput
  }

  export type CoordinatorUpdateToOneWithWhereWithoutDepartmentInput = {
    where?: CoordinatorWhereInput
    data: XOR<CoordinatorUpdateWithoutDepartmentInput, CoordinatorUncheckedUpdateWithoutDepartmentInput>
  }

  export type CoordinatorUpdateWithoutDepartmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    assessment?: CoordinatorAssessmentUpdateOneWithoutCoordinatorNestedInput
    user?: UserUpdateOneRequiredWithoutCoordinatorNestedInput
    supervisers?: SuperviserUpdateManyWithoutCoordinatorNestedInput
  }

  export type CoordinatorUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    assessment?: CoordinatorAssessmentUncheckedUpdateOneWithoutCoordinatorNestedInput
    supervisers?: SuperviserUncheckedUpdateManyWithoutCoordinatorNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
    create: XOR<StudentCreateWithoutDepartmentInput, StudentUncheckedCreateWithoutDepartmentInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutDepartmentInput, StudentUncheckedUpdateWithoutDepartmentInput>
  }

  export type StudentUpdateManyWithWhereWithoutDepartmentInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: IntFilter<"Student"> | number
    userId?: IntFilter<"Student"> | number
    departmentId?: IntFilter<"Student"> | number
    email?: StringFilter<"Student"> | string
    studentNumber?: IntFilter<"Student"> | number
    cassessmentId?: IntFilter<"Student"> | number
    sassessmentId?: IntFilter<"Student"> | number
  }

  export type SuperviserAssessmentCreateWithoutSuperviserInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentCreateNestedOneWithoutSassessmentInput
  }

  export type SuperviserAssessmentUncheckedCreateWithoutSuperviserInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentUncheckedCreateNestedOneWithoutSassessmentInput
  }

  export type SuperviserAssessmentCreateOrConnectWithoutSuperviserInput = {
    where: SuperviserAssessmentWhereUniqueInput
    create: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
  }

  export type CompanyCreateWithoutSuperviserInput = {
    workingFields?: CompanyCreateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr: number
    fax?: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUncheckedCreateWithoutSuperviserInput = {
    id?: number
    workingFields?: CompanyCreateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr: number
    fax?: number | null
    telephoneNumber: string
    email: string
    webAddr: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyCreateOrConnectWithoutSuperviserInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSuperviserInput, CompanyUncheckedCreateWithoutSuperviserInput>
  }

  export type UserCreateWithoutSupervisorInput = {
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupervisorInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupervisorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
  }

  export type CoordinatorCreateWithoutSupervisersInput = {
    email: string
    assessment?: CoordinatorAssessmentCreateNestedOneWithoutCoordinatorInput
    department?: DepartmentCreateNestedOneWithoutCoordinatorInput
    user: UserCreateNestedOneWithoutCoordinatorInput
  }

  export type CoordinatorUncheckedCreateWithoutSupervisersInput = {
    id?: number
    userId: number
    email: string
    departmentId?: number | null
    assessment?: CoordinatorAssessmentUncheckedCreateNestedOneWithoutCoordinatorInput
  }

  export type CoordinatorCreateOrConnectWithoutSupervisersInput = {
    where: CoordinatorWhereUniqueInput
    create: XOR<CoordinatorCreateWithoutSupervisersInput, CoordinatorUncheckedCreateWithoutSupervisersInput>
  }

  export type SuperviserAssessmentUpsertWithoutSuperviserInput = {
    update: XOR<SuperviserAssessmentUpdateWithoutSuperviserInput, SuperviserAssessmentUncheckedUpdateWithoutSuperviserInput>
    create: XOR<SuperviserAssessmentCreateWithoutSuperviserInput, SuperviserAssessmentUncheckedCreateWithoutSuperviserInput>
    where?: SuperviserAssessmentWhereInput
  }

  export type SuperviserAssessmentUpdateToOneWithWhereWithoutSuperviserInput = {
    where?: SuperviserAssessmentWhereInput
    data: XOR<SuperviserAssessmentUpdateWithoutSuperviserInput, SuperviserAssessmentUncheckedUpdateWithoutSuperviserInput>
  }

  export type SuperviserAssessmentUpdateWithoutSuperviserInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneWithoutSassessmentNestedInput
  }

  export type SuperviserAssessmentUncheckedUpdateWithoutSuperviserInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUncheckedUpdateOneWithoutSassessmentNestedInput
  }

  export type CompanyUpsertWithoutSuperviserInput = {
    update: XOR<CompanyUpdateWithoutSuperviserInput, CompanyUncheckedUpdateWithoutSuperviserInput>
    create: XOR<CompanyCreateWithoutSuperviserInput, CompanyUncheckedCreateWithoutSuperviserInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSuperviserInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSuperviserInput, CompanyUncheckedUpdateWithoutSuperviserInput>
  }

  export type CompanyUpdateWithoutSuperviserInput = {
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateWithoutSuperviserInput = {
    id?: IntFieldUpdateOperationsInput | number
    workingFields?: CompanyUpdateworkingFieldsInput | $Enums.WorkingFields[]
    postalAddr?: IntFieldUpdateOperationsInput | number
    fax?: NullableIntFieldUpdateOperationsInput | number | null
    telephoneNumber?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    webAddr?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSupervisorInput = {
    update: XOR<UserUpdateWithoutSupervisorInput, UserUncheckedUpdateWithoutSupervisorInput>
    create: XOR<UserCreateWithoutSupervisorInput, UserUncheckedCreateWithoutSupervisorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSupervisorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSupervisorInput, UserUncheckedUpdateWithoutSupervisorInput>
  }

  export type UserUpdateWithoutSupervisorInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupervisorInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type CoordinatorUpsertWithoutSupervisersInput = {
    update: XOR<CoordinatorUpdateWithoutSupervisersInput, CoordinatorUncheckedUpdateWithoutSupervisersInput>
    create: XOR<CoordinatorCreateWithoutSupervisersInput, CoordinatorUncheckedCreateWithoutSupervisersInput>
    where?: CoordinatorWhereInput
  }

  export type CoordinatorUpdateToOneWithWhereWithoutSupervisersInput = {
    where?: CoordinatorWhereInput
    data: XOR<CoordinatorUpdateWithoutSupervisersInput, CoordinatorUncheckedUpdateWithoutSupervisersInput>
  }

  export type CoordinatorUpdateWithoutSupervisersInput = {
    email?: StringFieldUpdateOperationsInput | string
    assessment?: CoordinatorAssessmentUpdateOneWithoutCoordinatorNestedInput
    department?: DepartmentUpdateOneWithoutCoordinatorNestedInput
    user?: UserUpdateOneRequiredWithoutCoordinatorNestedInput
  }

  export type CoordinatorUncheckedUpdateWithoutSupervisersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableIntFieldUpdateOperationsInput | number | null
    assessment?: CoordinatorAssessmentUncheckedUpdateOneWithoutCoordinatorNestedInput
  }

  export type CoordinatorAssessmentCreateWithoutCoordinatorInput = {
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentCreateNestedOneWithoutCassessmentInput
  }

  export type CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput = {
    id?: number
    qualityOfStudentInternshipReport?: $Enums.Scores
    experienceGained?: $Enums.Scores
    presentation?: $Enums.Scores
    visualPresentationAid?: $Enums.Scores
    overalAssessmentResult?: $Enums.Scores
    studentId: number
    student?: StudentUncheckedCreateNestedOneWithoutCassessmentInput
  }

  export type CoordinatorAssessmentCreateOrConnectWithoutCoordinatorInput = {
    where: CoordinatorAssessmentWhereUniqueInput
    create: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
  }

  export type DepartmentCreateWithoutCoordinatorInput = {
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCoordinatorInput = {
    id?: number
    name: $Enums.DepartmentNames
    createdAt?: Date | string
    updatedAt?: Date | string
    students?: StudentUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCoordinatorInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoordinatorInput, DepartmentUncheckedCreateWithoutCoordinatorInput>
  }

  export type UserCreateWithoutCoordinatorInput = {
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    supervisor?: SuperviserCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCoordinatorInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    image?: ImageUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    supervisor?: SuperviserUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCoordinatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoordinatorInput, UserUncheckedCreateWithoutCoordinatorInput>
  }

  export type SuperviserCreateWithoutCoordinatorInput = {
    email: string
    position: string
    assessment?: SuperviserAssessmentCreateNestedOneWithoutSuperviserInput
    company: CompanyCreateNestedOneWithoutSuperviserInput
    user: UserCreateNestedOneWithoutSupervisorInput
  }

  export type SuperviserUncheckedCreateWithoutCoordinatorInput = {
    id?: number
    userId: number
    email: string
    position: string
    companyId: number
    assessment?: SuperviserAssessmentUncheckedCreateNestedOneWithoutSuperviserInput
  }

  export type SuperviserCreateOrConnectWithoutCoordinatorInput = {
    where: SuperviserWhereUniqueInput
    create: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput>
  }

  export type SuperviserCreateManyCoordinatorInputEnvelope = {
    data: SuperviserCreateManyCoordinatorInput | SuperviserCreateManyCoordinatorInput[]
    skipDuplicates?: boolean
  }

  export type CoordinatorAssessmentUpsertWithoutCoordinatorInput = {
    update: XOR<CoordinatorAssessmentUpdateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedUpdateWithoutCoordinatorInput>
    create: XOR<CoordinatorAssessmentCreateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedCreateWithoutCoordinatorInput>
    where?: CoordinatorAssessmentWhereInput
  }

  export type CoordinatorAssessmentUpdateToOneWithWhereWithoutCoordinatorInput = {
    where?: CoordinatorAssessmentWhereInput
    data: XOR<CoordinatorAssessmentUpdateWithoutCoordinatorInput, CoordinatorAssessmentUncheckedUpdateWithoutCoordinatorInput>
  }

  export type CoordinatorAssessmentUpdateWithoutCoordinatorInput = {
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUpdateOneWithoutCassessmentNestedInput
  }

  export type CoordinatorAssessmentUncheckedUpdateWithoutCoordinatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    qualityOfStudentInternshipReport?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    experienceGained?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    presentation?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    visualPresentationAid?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    overalAssessmentResult?: EnumScoresFieldUpdateOperationsInput | $Enums.Scores
    studentId?: IntFieldUpdateOperationsInput | number
    student?: StudentUncheckedUpdateOneWithoutCassessmentNestedInput
  }

  export type DepartmentUpsertWithoutCoordinatorInput = {
    update: XOR<DepartmentUpdateWithoutCoordinatorInput, DepartmentUncheckedUpdateWithoutCoordinatorInput>
    create: XOR<DepartmentCreateWithoutCoordinatorInput, DepartmentUncheckedCreateWithoutCoordinatorInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoordinatorInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoordinatorInput, DepartmentUncheckedUpdateWithoutCoordinatorInput>
  }

  export type DepartmentUpdateWithoutCoordinatorInput = {
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoordinatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumDepartmentNamesFieldUpdateOperationsInput | $Enums.DepartmentNames
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    students?: StudentUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserUpsertWithoutCoordinatorInput = {
    update: XOR<UserUpdateWithoutCoordinatorInput, UserUncheckedUpdateWithoutCoordinatorInput>
    create: XOR<UserCreateWithoutCoordinatorInput, UserUncheckedCreateWithoutCoordinatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoordinatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoordinatorInput, UserUncheckedUpdateWithoutCoordinatorInput>
  }

  export type UserUpdateWithoutCoordinatorInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCoordinatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    image?: ImageUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUncheckedUpdateOneWithoutUserNestedInput
  }

  export type SuperviserUpsertWithWhereUniqueWithoutCoordinatorInput = {
    where: SuperviserWhereUniqueInput
    update: XOR<SuperviserUpdateWithoutCoordinatorInput, SuperviserUncheckedUpdateWithoutCoordinatorInput>
    create: XOR<SuperviserCreateWithoutCoordinatorInput, SuperviserUncheckedCreateWithoutCoordinatorInput>
  }

  export type SuperviserUpdateWithWhereUniqueWithoutCoordinatorInput = {
    where: SuperviserWhereUniqueInput
    data: XOR<SuperviserUpdateWithoutCoordinatorInput, SuperviserUncheckedUpdateWithoutCoordinatorInput>
  }

  export type SuperviserUpdateManyWithWhereWithoutCoordinatorInput = {
    where: SuperviserScalarWhereInput
    data: XOR<SuperviserUpdateManyMutationInput, SuperviserUncheckedUpdateManyWithoutCoordinatorInput>
  }

  export type SuperviserScalarWhereInput = {
    AND?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
    OR?: SuperviserScalarWhereInput[]
    NOT?: SuperviserScalarWhereInput | SuperviserScalarWhereInput[]
    id?: IntFilter<"Superviser"> | number
    userId?: IntFilter<"Superviser"> | number
    email?: StringFilter<"Superviser"> | string
    position?: StringFilter<"Superviser"> | string
    companyId?: IntFilter<"Superviser"> | number
    coordinatorId?: IntFilter<"Superviser"> | number
  }

  export type ImageCreateWithoutApplicationInput = {
    name: string
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
    user?: UserCreateNestedOneWithoutImageInput
  }

  export type ImageUncheckedCreateWithoutApplicationInput = {
    id?: number
    name: string
    userId: number
    createdAt: Date | string
    updatedAt: Date | string
    isVerified?: boolean
    size?: number
  }

  export type ImageCreateOrConnectWithoutApplicationInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
  }

  export type ResumeCreateWithoutApplicationInput = {
    name: string
    isVerified?: boolean
    createdAt: Date | string
    updatedAt: Date | string
    size?: number
  }

  export type ResumeUncheckedCreateWithoutApplicationInput = {
    id?: number
    name: string
    isVerified?: boolean
    createdAt: Date | string
    updatedAt: Date | string
    size?: number
  }

  export type ResumeCreateOrConnectWithoutApplicationInput = {
    where: ResumeWhereUniqueInput
    create: XOR<ResumeCreateWithoutApplicationInput, ResumeUncheckedCreateWithoutApplicationInput>
  }

  export type StudentCreateWithoutApplicationsInput = {
    email: string
    studentNumber: number
    cassessment?: CoordinatorAssessmentCreateNestedOneWithoutStudentInput
    sassessment?: SuperviserAssessmentCreateNestedOneWithoutStudentInput
    department: DepartmentCreateNestedOneWithoutStudentsInput
    user: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutApplicationsInput = {
    id?: number
    userId: number
    departmentId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
  }

  export type StudentCreateOrConnectWithoutApplicationsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutApplicationsInput, StudentUncheckedCreateWithoutApplicationsInput>
  }

  export type ImageUpsertWithoutApplicationInput = {
    update: XOR<ImageUpdateWithoutApplicationInput, ImageUncheckedUpdateWithoutApplicationInput>
    create: XOR<ImageCreateWithoutApplicationInput, ImageUncheckedCreateWithoutApplicationInput>
    where?: ImageWhereInput
  }

  export type ImageUpdateToOneWithWhereWithoutApplicationInput = {
    where?: ImageWhereInput
    data: XOR<ImageUpdateWithoutApplicationInput, ImageUncheckedUpdateWithoutApplicationInput>
  }

  export type ImageUpdateWithoutApplicationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneWithoutImageNestedInput
  }

  export type ImageUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeUpsertWithoutApplicationInput = {
    update: XOR<ResumeUpdateWithoutApplicationInput, ResumeUncheckedUpdateWithoutApplicationInput>
    create: XOR<ResumeCreateWithoutApplicationInput, ResumeUncheckedCreateWithoutApplicationInput>
    where?: ResumeWhereInput
  }

  export type ResumeUpdateToOneWithWhereWithoutApplicationInput = {
    where?: ResumeWhereInput
    data: XOR<ResumeUpdateWithoutApplicationInput, ResumeUncheckedUpdateWithoutApplicationInput>
  }

  export type ResumeUpdateWithoutApplicationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
  }

  export type ResumeUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    size?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpsertWithoutApplicationsInput = {
    update: XOR<StudentUpdateWithoutApplicationsInput, StudentUncheckedUpdateWithoutApplicationsInput>
    create: XOR<StudentCreateWithoutApplicationsInput, StudentUncheckedCreateWithoutApplicationsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutApplicationsInput, StudentUncheckedUpdateWithoutApplicationsInput>
  }

  export type StudentUpdateWithoutApplicationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessment?: CoordinatorAssessmentUpdateOneWithoutStudentNestedInput
    sassessment?: SuperviserAssessmentUpdateOneWithoutStudentNestedInput
    department?: DepartmentUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    departmentId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserCreateWithoutCompanyInput = {
    email: string
    position: string
    assessment?: SuperviserAssessmentCreateNestedOneWithoutSuperviserInput
    user: UserCreateNestedOneWithoutSupervisorInput
    coordinator: CoordinatorCreateNestedOneWithoutSupervisersInput
  }

  export type SuperviserUncheckedCreateWithoutCompanyInput = {
    id?: number
    userId: number
    email: string
    position: string
    coordinatorId: number
    assessment?: SuperviserAssessmentUncheckedCreateNestedOneWithoutSuperviserInput
  }

  export type SuperviserCreateOrConnectWithoutCompanyInput = {
    where: SuperviserWhereUniqueInput
    create: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput>
  }

  export type SuperviserCreateManyCompanyInputEnvelope = {
    data: SuperviserCreateManyCompanyInput | SuperviserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type SuperviserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: SuperviserWhereUniqueInput
    update: XOR<SuperviserUpdateWithoutCompanyInput, SuperviserUncheckedUpdateWithoutCompanyInput>
    create: XOR<SuperviserCreateWithoutCompanyInput, SuperviserUncheckedCreateWithoutCompanyInput>
  }

  export type SuperviserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: SuperviserWhereUniqueInput
    data: XOR<SuperviserUpdateWithoutCompanyInput, SuperviserUncheckedUpdateWithoutCompanyInput>
  }

  export type SuperviserUpdateManyWithWhereWithoutCompanyInput = {
    where: SuperviserScalarWhereInput
    data: XOR<SuperviserUpdateManyMutationInput, SuperviserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserCreateWithoutImageInput = {
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    student?: StudentCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorCreateNestedOneWithoutUserInput
    supervisor?: SuperviserCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutImageInput = {
    id?: number
    firstname: string
    lastname: string
    email: string
    role?: $Enums.Role
    hashedPassword: string
    createdAt?: Date | string
    updatedAt?: Date | string
    hashedRT?: string | null
    lastLoggedInTime?: Date | string | null
    phone?: string | null
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    coordinator?: CoordinatorUncheckedCreateNestedOneWithoutUserInput
    supervisor?: SuperviserUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutImageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
  }

  export type ApplicationCreateWithoutInsuranceInput = {
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    resume: ResumeCreateNestedOneWithoutApplicationInput
    student: StudentCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutInsuranceInput = {
    id?: number
    studentId: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
  }

  export type ApplicationCreateOrConnectWithoutInsuranceInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutInsuranceInput, ApplicationUncheckedCreateWithoutInsuranceInput>
  }

  export type UserUpsertWithoutImageInput = {
    update: XOR<UserUpdateWithoutImageInput, UserUncheckedUpdateWithoutImageInput>
    create: XOR<UserCreateWithoutImageInput, UserUncheckedCreateWithoutImageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImageInput, UserUncheckedUpdateWithoutImageInput>
  }

  export type UserUpdateWithoutImageInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutImageInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    hashedPassword?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashedRT?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoggedInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    coordinator?: CoordinatorUncheckedUpdateOneWithoutUserNestedInput
    supervisor?: SuperviserUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ApplicationUpsertWithoutInsuranceInput = {
    update: XOR<ApplicationUpdateWithoutInsuranceInput, ApplicationUncheckedUpdateWithoutInsuranceInput>
    create: XOR<ApplicationCreateWithoutInsuranceInput, ApplicationUncheckedCreateWithoutInsuranceInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutInsuranceInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutInsuranceInput, ApplicationUncheckedUpdateWithoutInsuranceInput>
  }

  export type ApplicationUpdateWithoutInsuranceInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    resume?: ResumeUpdateOneRequiredWithoutApplicationNestedInput
    student?: StudentUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutInsuranceInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApplicationCreateWithoutResumeInput = {
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageCreateNestedOneWithoutApplicationInput
    student: StudentCreateNestedOneWithoutApplicationsInput
  }

  export type ApplicationUncheckedCreateWithoutResumeInput = {
    id?: number
    studentId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
    insurance?: ImageUncheckedCreateNestedOneWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutResumeInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
  }

  export type ApplicationUpsertWithoutResumeInput = {
    update: XOR<ApplicationUpdateWithoutResumeInput, ApplicationUncheckedUpdateWithoutResumeInput>
    create: XOR<ApplicationCreateWithoutResumeInput, ApplicationUncheckedCreateWithoutResumeInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutResumeInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutResumeInput, ApplicationUncheckedUpdateWithoutResumeInput>
  }

  export type ApplicationUpdateWithoutResumeInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUpdateOneWithoutApplicationNestedInput
    student?: StudentUpdateOneRequiredWithoutApplicationsNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutResumeInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUncheckedUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyStudentInput = {
    id?: number
    resumeId: number
    name: string
    days: number
    email: string
    cyprus?: boolean | null
    isApproved?: boolean
  }

  export type ApplicationUpdateWithoutStudentInput = {
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUpdateOneWithoutApplicationNestedInput
    resume?: ResumeUpdateOneRequiredWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    insurance?: ImageUncheckedUpdateOneWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    resumeId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    days?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    cyprus?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudentCreateManyDepartmentInput = {
    id?: number
    userId: number
    email: string
    studentNumber: number
    cassessmentId: number
    sassessmentId: number
  }

  export type StudentUpdateWithoutDepartmentInput = {
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUpdateManyWithoutStudentNestedInput
    cassessment?: CoordinatorAssessmentUpdateOneWithoutStudentNestedInput
    sassessment?: SuperviserAssessmentUpdateOneWithoutStudentNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
    applications?: ApplicationUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    studentNumber?: IntFieldUpdateOperationsInput | number
    cassessmentId?: IntFieldUpdateOperationsInput | number
    sassessmentId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserCreateManyCoordinatorInput = {
    id?: number
    userId: number
    email: string
    position: string
    companyId: number
  }

  export type SuperviserUpdateWithoutCoordinatorInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    assessment?: SuperviserAssessmentUpdateOneWithoutSuperviserNestedInput
    company?: CompanyUpdateOneRequiredWithoutSuperviserNestedInput
    user?: UserUpdateOneRequiredWithoutSupervisorNestedInput
  }

  export type SuperviserUncheckedUpdateWithoutCoordinatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    assessment?: SuperviserAssessmentUncheckedUpdateOneWithoutSuperviserNestedInput
  }

  export type SuperviserUncheckedUpdateManyWithoutCoordinatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
  }

  export type SuperviserCreateManyCompanyInput = {
    id?: number
    userId: number
    email: string
    position: string
    coordinatorId: number
  }

  export type SuperviserUpdateWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    assessment?: SuperviserAssessmentUpdateOneWithoutSuperviserNestedInput
    user?: UserUpdateOneRequiredWithoutSupervisorNestedInput
    coordinator?: CoordinatorUpdateOneRequiredWithoutSupervisersNestedInput
  }

  export type SuperviserUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    coordinatorId?: IntFieldUpdateOperationsInput | number
    assessment?: SuperviserAssessmentUncheckedUpdateOneWithoutSuperviserNestedInput
  }

  export type SuperviserUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    coordinatorId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordinatorCountOutputTypeDefaultArgs instead
     */
    export type CoordinatorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoordinatorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordinatorAssessmentDefaultArgs instead
     */
    export type CoordinatorAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoordinatorAssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuperviserAssessmentDefaultArgs instead
     */
    export type SuperviserAssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuperviserAssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SuperviserDefaultArgs instead
     */
    export type SuperviserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SuperviserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoordinatorDefaultArgs instead
     */
    export type CoordinatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoordinatorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApplicationDefaultArgs instead
     */
    export type ApplicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApplicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationDefaultArgs instead
     */
    export type VerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageDefaultArgs instead
     */
    export type ImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResumeDefaultArgs instead
     */
    export type ResumeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResumeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}