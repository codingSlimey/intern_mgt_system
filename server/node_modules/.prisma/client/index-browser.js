
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.1
 * Query Engine version: 79fb5193cf0a8fdbef536e4b4a159cad677ab1b9
 */
Prisma.prismaVersion = {
  client: "5.7.1",
  engine: "79fb5193cf0a8fdbef536e4b4a159cad677ab1b9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CoordinatorAssessmentScalarFieldEnum = {
  id: 'id',
  qualityOfStudentInternshipReport: 'qualityOfStudentInternshipReport',
  experienceGained: 'experienceGained',
  presentation: 'presentation',
  visualPresentationAid: 'visualPresentationAid',
  overalAssessmentResult: 'overalAssessmentResult',
  studentId: 'studentId',
  coordinatorId: 'coordinatorId'
};

exports.Prisma.SuperviserAssessmentScalarFieldEnum = {
  id: 'id',
  qualityOfStudentInternshipReport: 'qualityOfStudentInternshipReport',
  experienceGained: 'experienceGained',
  presentation: 'presentation',
  visualPresentationAid: 'visualPresentationAid',
  overalAssessmentResult: 'overalAssessmentResult',
  studentId: 'studentId',
  superviserId: 'superviserId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  email: 'email',
  role: 'role',
  hashedPassword: 'hashedPassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hashedRT: 'hashedRT',
  lastLoggedInTime: 'lastLoggedInTime',
  phone: 'phone'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  departmentId: 'departmentId',
  email: 'email',
  studentNumber: 'studentNumber',
  cassessmentId: 'cassessmentId',
  sassessmentId: 'sassessmentId'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuperviserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  position: 'position',
  companyId: 'companyId',
  coordinatorId: 'coordinatorId'
};

exports.Prisma.CoordinatorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  departmentId: 'departmentId'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  resumeId: 'resumeId',
  name: 'name',
  days: 'days',
  email: 'email',
  cyprus: 'cyprus',
  isApproved: 'isApproved'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  workingFields: 'workingFields',
  postalAddr: 'postalAddr',
  fax: 'fax',
  telephoneNumber: 'telephoneNumber',
  email: 'email',
  webAddr: 'webAddr',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  logo: 'logo'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  try: 'try',
  code: 'code',
  lastResendTime: 'lastResendTime'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  applicationId: 'applicationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isVerified: 'isVerified',
  size: 'size'
};

exports.Prisma.ResumeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  size: 'size'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Scores = exports.$Enums.Scores = {
  POOR: 'POOR',
  FAIR: 'FAIR',
  GOOD: 'GOOD',
  EXCELLENT: 'EXCELLENT'
};

exports.Role = exports.$Enums.Role = {
  user: 'user',
  admin: 'admin'
};

exports.DepartmentNames = exports.$Enums.DepartmentNames = {
  DEPARTMENT1: 'DEPARTMENT1',
  DEPARTMENT2: 'DEPARTMENT2',
  DEPARTMENT3: 'DEPARTMENT3'
};

exports.WorkingFields = exports.$Enums.WorkingFields = {
  TECHNOLOGY: 'TECHNOLOGY',
  BUSINESS: 'BUSINESS',
  FIELD1: 'FIELD1',
  FIELD2: 'FIELD2',
  FIELD3: 'FIELD3'
};

exports.Prisma.ModelName = {
  CoordinatorAssessment: 'CoordinatorAssessment',
  SuperviserAssessment: 'SuperviserAssessment',
  User: 'User',
  Student: 'Student',
  Department: 'Department',
  Superviser: 'Superviser',
  Coordinator: 'Coordinator',
  Application: 'Application',
  Company: 'Company',
  Verification: 'Verification',
  Image: 'Image',
  Resume: 'Resume'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
